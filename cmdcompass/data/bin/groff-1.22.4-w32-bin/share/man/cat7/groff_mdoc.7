GROFF_MDOC(7)        BSD Miscellaneous Information Manual        GROFF_MDOC(7)

NNAAMMEE
     ggrrooffff__mmddoocc -- reference for groff's mdoc implementation

SSYYNNOOPPSSIISS
     ggrrooffff --mmddoocc _f_i_l_e _._._.

DDEESSCCRRIIPPTTIIOONN
     A complete reference for writing UNIX manual pages with the --mmddoocc macro
     package; a _c_o_n_t_e_n_t-based and _d_o_m_a_i_n-based formatting package for GNU
     troff(1).  Its predecessor, the -man(7) package, addressed page layout
     leaving the manipulation of fonts and other typesetting details to the
     individual author.  In --mmddoocc, page layout macros make up the _p_a_g_e
     _s_t_r_u_c_t_u_r_e _d_o_m_a_i_n which consists of macros for titles, section headers,
     displays and lists - essentially items which affect the physical position
     of text on a formatted page.  In addition to the page structure domain,
     there are two more domains, the _m_a_n_u_a_l domain and the _g_e_n_e_r_a_l text do-
     main.  The general text domain is defined as macros which perform tasks
     such as quoting or emphasizing pieces of text.  The manual domain is de-
     fined as macros that are a subset of the day to day informal language
     used to describe commands, routines and related UNIX files.  Macros in
     the manual domain handle command names, command-line arguments and op-
     tions, function names, function parameters, pathnames, variables, cross
     references to other manual pages, and so on.  These domain items have
     value for both the author and the future user of the manual page.  Hope-
     fully, the consistency gained across the manual set will provide easier
     translation to future documentation tools.

     Throughout the UNIX manual pages, a manual entry is simply referred to as
     a man page, regardless of actual length and without sexist intention.

GGEETTTTIINNGG SSTTAARRTTEEDD
     The material presented in the remainder of this document is outlined as
     follows:

           1.   TROFF IDIOSYNCRASIES
                Macro Usage
                Passing Space Characters in an Argument
                Trailing Blank Space Characters
                Escaping Special Characters
                Other Possible Pitfalls

           2.   A MANUAL PAGE TEMPLATE

           3.   CONVENTIONS

           4.   TITLE MACROS

           5.   INTRODUCTION OF MANUAL AND GENERAL TEXT DOMAINS
                What's in a Name...
                General Syntax

           6.   MANUAL DOMAIN
                Addresses
                Author Name
                Arguments
                Configuration Declarations (Section Four Only)
                Command Modifiers
                Defined Variables
                Errno's
                Environment Variables
                Flags
                Function Declarations
                Function Types
                Functions (Library Routines)
                Function Arguments
                Return Values
                Exit Status
                Interactive Commands
                Library Names
                Literals
                Names
                Options
                Pathnames
                Standards
                Variable Types
                Variables
                Manual Page Cross References

           7.   GENERAL TEXT DOMAIN
                AT&T Macro
                BSD Macro
                NetBSD Macro
                FreeBSD Macro
                DragonFly Macro
                OpenBSD Macro
                BSD/OS Macro
                UNIX Macro
                Emphasis Macro
                Font Mode
                Enclosure and Quoting Macros
                No-Op or Normal Text Macro
                No-Space Macro
                Section Cross References
                Symbolics
                Mathematical Symbols
                References and Citations
                Trade Names (or Acronyms and Type Names)
                Extended Arguments

           8.   PAGE STRUCTURE DOMAIN
                Section Headers
                Subsection Headers
                Paragraphs and Line Spacing
                Keeps
                Examples and Displays
                Lists and Columns

           9.   MISCELLANEOUS MACROS

           10.  PREDEFINED STRINGS

           11.  DIAGNOSTICS

           12.  FORMATTING WITH GROFF, TROFF, AND NROFF

           13.  FILES

           14.  SEE ALSO

           15.  BUGS

TTRROOFFFF IIDDIIOOSSYYNNCCRRAASSIIEESS
     The --mmddoocc package attempts to simplify the process of writing a man page.
     Theoretically, one should not have to learn the tricky details of GNU
     troff(1) to use --mmddoocc; however, there are a few limitations which are un-
     avoidable and best gotten out of the way.  And, too, be forewarned, this
     package is _n_o_t fast.

   MMaaccrroo UUssaaggee
     As in GNU troff(1), a macro is called by placing a `.' (dot character) at
     the beginning of a line followed by the two-character (or three-charac-
     ter) name for the macro.  There can be space or tab characters between
     the dot and the macro name.  Arguments may follow the macro separated by
     spaces (but _n_o tabs).  It is the dot character at the beginning of the
     line which causes GNU troff(1) to interpret the next two (or more) char-
     acters as a macro name.  A single starting dot followed by nothing is ig-
     nored.  To place a `.' (dot character) at the beginning of an input line
     in some context other than a macro invocation, precede the `.' (dot) with
     the `\&' escape sequence which translates literally to a zero-width
     space, and is never displayed in the output.

     In general, GNU troff(1) macros accept an unlimited number of arguments
     (contrary to other versions of troff which can't handle more than nine
     arguments).  In limited cases, arguments may be continued or extended on
     the next line (See _E_x_t_e_n_d_e_d _A_r_g_u_m_e_n_t_s below).  Almost all macros handle
     quoted arguments (see _P_a_s_s_i_n_g _S_p_a_c_e _C_h_a_r_a_c_t_e_r_s _i_n _a_n _A_r_g_u_m_e_n_t below).

     Most of the --mmddoocc general text domain and manual domain macros are spe-
     cial in that their argument lists are _p_a_r_s_e_d for callable macro names.
     This means an argument on the argument list which matches a general text
     or manual domain macro name (and which is defined to be callable) will be
     executed or called when it is processed.  In this case the argument, al-
     though the name of a macro, is not preceded by a `.' (dot).  This makes
     it possible to nest macros; for example the option macro, `.Op', may _c_a_l_l
     the flag and argument macros, `Fl' and `Ar', to specify an optional flag
     with an argument:

           [--ss _b_y_t_e_s]  is produced by `.Op Fl s Ar bytes'

     To prevent a string from being interpreted as a macro name, precede the
     string with the escape sequence `\&':

           [Fl s Ar bytes]  is produced by `.Op \&Fl s \&Ar bytes'

     Here the strings `Fl' and `Ar' are not interpreted as macros.  Macros
     whose argument lists are parsed for callable arguments are referred to as
     _p_a_r_s_e_d and macros which may be called from an argument list are referred
     to as _c_a_l_l_a_b_l_e throughout this document.  This is a technical _f_a_u_x _p_a_s as
     almost all of the macros in --mmddoocc are parsed, but as it was cumbersome to
     constantly refer to macros as being callable and being able to call other
     macros, the term parsed has been used.

     In the following, we call an --mmddoocc macro which starts a line (with a
     leading dot) a _c_o_m_m_a_n_d if this distinction is necessary.

   PPaassssiinngg SSppaaccee CChhaarraacctteerrss iinn aann AArrgguummeenntt
     Sometimes it is desirable to give as an argument a string containing one
     or more blank space characters, say, to specify arguments to commands
     which expect particular arrangement of items in the argument list.  Addi-
     tionally, it makes --mmddoocc working faster.  For example, the function com-
     mand `.Fn' expects the first argument to be the name of a function and
     any remaining arguments to be function parameters.  As ANSI C stipulates
     the declaration of function parameters in the parenthesized parameter
     list, each parameter is guaranteed to be at minimum a two word string.
     For example, _i_n_t _f_o_o.

     There are two possible ways to pass an argument which contains an embed-
     ded space.  One way of passing a string containing blank spaces is to use
     the hard or unpaddable space character `\ ', that is, a blank space pre-
     ceded by the escape character `\'.  This method may be used with any
     macro but has the side effect of interfering with the adjustment of text
     over the length of a line.  Troff sees the hard space as if it were any
     other printable character and cannot split the string into blank or new-
     line separated pieces as one would expect.  This method is useful for
     strings which are not expected to overlap a line boundary.  An alterna-
     tive is to use `\~', a paddable (i.e. stretchable), unbreakable space
     (this is a GNU troff(1) extension).  The second method is to enclose the
     string with double quotes.

     For example:

           ffeettcchh(_c_h_a_r _*_s_t_r)  is created by `.Fn fetch char\ *str'

           ffeettcchh(_c_h_a_r _*_s_t_r)  can also be created by `.Fn fetch "char *str"'

     If the `\' before the space in the first example or double quotes in the
     second example were omitted, `.Fn' would see three arguments, and the re-
     sult would be:

           ffeettcchh(_c_h_a_r, _*_s_t_r)

   TTrraaiilliinngg BBllaannkk SSppaaccee CChhaarraacctteerrss
     Troff can be confused by blank space characters at the end of a line.  It
     is a wise preventive measure to globally remove all blank spaces from
     <blank-space><end-of-line> character sequences.  Should the need arise to
     use a blank character at the end of a line, it may be forced with an un-
     paddable space and the `\&' escape character.  For example, `string\ \&'.

   EEssccaappiinngg SSppeecciiaall CChhaarraacctteerrss
     Special characters like the newline character `\n' are handled by replac-
     ing the `\' with `\e' (e.g. `\en') to preserve the backslash.

   OOtthheerr PPoossssiibbllee PPiittffaallllss
     A warning is emitted when an empty input line is found outside of dis-
     plays (see below).  Use `.sp' instead.  (Well, it is even better to use
     --mmddoocc macros to avoid the usage of low-level commands.)

     Leading spaces will cause a break and are output directly.  Avoid this
     behaviour if possible.  Similarly, do not use more than one space charac-
     ter between words in an ordinary text line; contrary to other text for-
     matters, they are _n_o_t replaced with a single space.

     You can't pass `"' directly as an argument.  Use `\*[q]' (or `\*q') in-
     stead.

     By default, troff(1) inserts two space characters after a punctuation
     mark closing a sentence; characters like `)' or `'' are treated transpar-
     ently, not influencing the sentence-ending behaviour.  To change this,
     insert `\&' before or after the dot:

           The
           .Ql .
           character.
           .Pp
           The
           .Ql \&.
           character.
           .Pp
           .No test .
           test
           .Pp
           .No test.
           test

     gives

           The `'.  character

           The `.' character.

           test.  test

           test. test

     As can be seen in the first and third line, --mmddoocc handles punctuation
     characters specially in macro arguments.  This will be explained in sec-
     tion _G_e_n_e_r_a_l _S_y_n_t_a_x below.  In the same way, you have to protect trailing
     full stops of abbreviations with a trailing zero-width space: `e.g.\&'.

     A comment in the source file of a man page can be either started with
     `.\"' on a single line, `\"' after some input, or `\#' anywhere (the lat-
     ter is a GNU troff(1) extension); the rest of such a line is ignored.

AA MMAANNUUAALL PPAAGGEE TTEEMMPPLLAATTEE
     The body of a man page is easily constructed from a basic template:

           .\" The following commands are required for all man pages.
           .Dd Month day, year
           .Dt DOCUMENT_TITLE [section number] [architecture/volume]
           .Os [OPERATING_SYSTEM] [version/release]
           .Sh NAME
           .Nm name
           .Nd one line description of name
           .\" This next command is for sections 2 and 3 only.
           .\" .Sh LIBRARY
           .Sh SYNOPSIS
           .Sh DESCRIPTION
           .\" The following commands should be uncommented and
           .\" used where appropriate.
           .\" .Sh IMPLEMENTATION NOTES
           .\" This next command is for sections 2, 3, and 9 only
           .\"     (function return values).
           .\" .Sh RETURN VALUES
           .\" This next command is for sections 1, 6, 7, and 8 only.
           .\" .Sh ENVIRONMENT
           .\" .Sh FILES
           .\" This next command is for sections 1, 6, and 8 only
           .\"     (command return values to the shell).
           .\" .Sh EXIT STATUS
           .\" .Sh EXAMPLES
           .\" This next command is for sections 1, 4, 6, 7, 8, and 9 only
           .\"     (fprintf/stderr type diagnostics).
           .\" .Sh DIAGNOSTICS
           .\" .Sh COMPATIBILITY
           .\" This next command is for sections 2, 3, 4, and 9 only
           .\"     (settings of the errno variable).
           .\" .Sh ERRORS
           .\" .Sh SEE ALSO
           .\" .Sh STANDARDS
           .\" .Sh HISTORY
           .\" .Sh AUTHORS
           .\" .Sh CAVEATS
           .\" .Sh BUGS

     The first items in the template are the commands `.Dd', `.Dt', and `.Os';
     the document date, the operating system the man page or subject source is
     developed or modified for, and the man page title (in _u_p_p_e_r _c_a_s_e) along
     with the section of the manual the page belongs in.  These commands iden-
     tify the page and are discussed below in _T_I_T_L_E _M_A_C_R_O_S.

     The remaining items in the template are section headers (.Sh); of which
     _N_A_M_E, _S_Y_N_O_P_S_I_S, and _D_E_S_C_R_I_P_T_I_O_N are mandatory.  The headers are discussed
     in _P_A_G_E _S_T_R_U_C_T_U_R_E _D_O_M_A_I_N, after presentation of _M_A_N_U_A_L _D_O_M_A_I_N.  Several
     content macros are used to demonstrate page layout macros; reading about
     content macros before page layout macros is recommended.

CCOONNVVEENNTTIIOONNSS
     In the description of all macros below, optional arguments are put into
     brackets.  An ellipsis (`...') represents zero or more additional argu-
     ments.  Alternative values for a parameter are separated with `|'.  If
     there are alternative values for a mandatory parameter, braces are used
     (together with `|') to enclose the value set.  Meta-variables are speci-
     fied within angles.

     Example:

           .Xx <foo> {bar1 | bar2} [-test1 [-test2 | -test3]] ...

     Except stated explicitly, all macros are parsed and callable.

     Note that a macro takes effect up to the next nested macro.  For example,
     `.Ic foo Aq bar' doesn't produce `ffoooo <<bbaarr>>' but `ffoooo <bar>'.  Conse-
     quently, a warning message is emitted for most commands if the first ar-
     gument is a macro itself since it cancels the effect of the calling com-
     mand completely.  Another consequence is that quoting macros never insert
     literal quotes; `ffoooo <<bbaarr>>' has been produced by `.Ic "foo <bar>"'.

     Most macros have a default width value which can be used to specify a la-
     bel width (--wwiiddtthh) or offset (--ooffffsseett) for the `.Bl' and `.Bd' macros.
     It is recommended not to use this rather obscure feature to avoid depen-
     dencies on local modifications of the --mmddoocc package.

TTIITTLLEE MMAACCRROOSS
     The title macros are part of the page structure domain but are presented
     first and separately for someone who wishes to start writing a man page
     yesterday.  Three header macros designate the document title or manual
     page title, the operating system, and the date of authorship.  These
     macros are called once at the very beginning of the document and are used
     to construct headers and footers only.

     .Dt [<document title>] [<section number>] [<volume>]
             The document title is the subject of the man page and must be in
             CAPITALS due to troff limitations.  If omitted, `UNTITLED' is
             used.  The section number may be a number in the range 1, ..., 9
             or `unass', `draft', or `paper'.  If it is specified, and no vol-
             ume name is given, a default volume name is used.

             Under BSD, the following sections are defined:

             1   BSD General Commands Manual
             2   BSD System Calls Manual
             3   BSD Library Functions Manual
             4   BSD Kernel Interfaces Manual
             5   BSD File Formats Manual
             6   BSD Games Manual
             7   BSD Miscellaneous Information Manual
             8   BSD System Manager's Manual
             9   BSD Kernel Developer's Manual

             A volume name may be arbitrary or one of the following:

             USD     User's Supplementary Documents
             PS1     Programmer's Supplementary Documents
             AMD     Ancestral Manual Documents
             SMM     System Manager's Manual
             URM     User's Reference Manual
             PRM     Programmer's Manual
             KM      Kernel Manual
             IND     Manual Master Index
             LOCAL   Local Manual
             CON     Contributed Software Manual

             For compatibility, `MMI' can be used for `IND', and `LOC' for
             `LOCAL'.  Values from the previous table will specify a new vol-
             ume name.  If the third parameter is a keyword designating a com-
             puter architecture, its value is prepended to the default volume
             name as specified by the second parameter.  By default, the fol-
             lowing architecture keywords are defined:

                   acorn26, acorn32, algor, alpha, amd64, amiga, amigappc,
                   arc, arm, arm26, arm32, armish, atari, aviion, beagle,
                   bebox, cats, cesfic, cobalt, dreamcast, emips, evbarm,
                   evbmips, evbppc, evbsh3, ews4800mips, hp300, hp700, hpcarm,
                   hpcmips, hpcsh, hppa, hppa64, i386, ia64, ibmnws, iyonix,
                   landisk, loongson, luna68k, luna88k, m68k, mac68k, macppc,
                   mips, mips64, mipsco, mmeye, mvme68k, mvme88k, mvmeppc,
                   netwinder, news68k, newsmips, next68k, ofppc, palm, pc532,
                   playstation2, pmax, pmppc, powerpc, prep, rs6000,
                   sandpoint, sbmips, sgi, sgimips, sh3, shark, socppc,
                   solbourne, sparc, sparc64, sun2, sun3, tahoe, vax, x68k,
                   x86_64, xen, zaurus

             If the section number is neither a numeric expression in the
             range 1 to 9 nor one of the above described keywords, the third
             parameter is used verbatim as the volume name.

             In the following examples, the left (which is identical to the
             right) and the middle part of the manual page header strings are
             shown.  Note how `\&' prevents the digit 7 from being a valid nu-
             meric expression.

                   .Dt FOO 7       `FOO(7)' `BSD Miscellaneous Information
                                   Manual'
                   .Dt FOO 7 bar   `FOO(7)' `BSD Miscellaneous Information
                                   Manual'
                   .Dt FOO \&7 bar
                                   `FOO(7)' `bar'
                   .Dt FOO 2 i386  `FOO(2)' `BSD/i386 System Calls Manual'
                   .Dt FOO "" bar  `FOO' `bar'

             Local, OS-specific additions might be found in the file
             _m_d_o_c_._l_o_c_a_l; look for strings named `volume-ds-XXX' (for the for-
             mer type) and `volume-as-XXX' (for the latter type); `XXX' then
             denotes the keyword to be used with the `.Dt' macro.

             This macro is neither callable nor parsed.

     .Os [<operating system>] [<release>]
             If the first parameter is empty, the default `BSD' is used.  This
             may be overridden in the local configuration file, _m_d_o_c_._l_o_c_a_l.
             In general, the name of the operating system should be the common
             acronym, e.g. BSD or ATT.  The release should be the standard re-
             lease nomenclature for the system specified.  In the following
             table, the possible second arguments for some predefined operat-
             ing systems are listed.  Similar to `.Dt', local additions might
             be defined in _m_d_o_c_._l_o_c_a_l; look for strings named
             `operating-system-XXX-YYY', where `XXX' is the acronym for the
             operating system and `YYY' the release ID.

                   ATT        7th, 7, III, 3, V, V.2, V.3, V.4

                   BSD        3, 4, 4.1, 4.2, 4.3, 4.3t, 4.3T, 4.3r, 4.3R, 4.4

                   NetBSD     0.8, 0.8a, 0.9, 0.9a, 1.0, 1.0a, 1.1, 1.2, 1.2a,
                              1.2b, 1.2c, 1.2d, 1.2e, 1.3, 1.3a, 1.4, 1.4.1,
                              1.4.2, 1.4.3, 1.5, 1.5.1, 1.5.2, 1.5.3, 1.6,
                              1.6.1, 1.6.2, 1.6.3, 2.0, 2.0.1, 2.0.2, 2.0.3,
                              2.1, 3.0, 3.0.1, 3.0.2, 3.0.3, 3.1, 3.1.1, 4.0,
                              4.0.1, 5.0, 5.0.1, 5.0.2, 5.1, 5.1.2, 5.1.3,
                              5.1.4, 5.2, 5.2.1, 5.2.2, 6.0, 6.0.1, 6.0.2,
                              6.0.3, 6.0.4, 6.0.5, 6.1, 6.1.1, 6.1.2, 6.1.3,
                              6.1.4

                   FreeBSD    1.0, 1.1, 1.1.5, 1.1.5.1, 2.0, 2.0.5, 2.1,
                              2.1.5, 2.1.6, 2.1.7, 2.2, 2.2.1, 2.2.2, 2.2.5,
                              2.2.6, 2.2.7, 2.2.8, 3.0, 3.1, 3.2, 3.3, 3.4,
                              3.5, 4.0, 4.1, 4.1.1, 4.2, 4.3, 4.4, 4.5, 4.6,
                              4.6.2, 4.7, 4.8, 4.9, 4.10, 4.11, 5.0, 5.1, 5.2,
                              5.2.1, 5.3, 5.4, 5.5, 6.0, 6.1, 6.2, 6.3, 6.4,
                              7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3,
                              8.4, 9.0, 9.1, 9.2, 9.3, 10.0

                   OpenBSD    2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8,
                              2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7,
                              3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6,
                              4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6

                   DragonFly  1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.8.1,
                              1.9, 1.10, 1.12, 1.12.2, 1.13, 2.0, 2.2, 2.3,
                              2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9.1, 2.10,
                              2.10.1, 2.11, 2.12, 2.13, 3.0, 3.1, 3.2, 3.3,
                              3.4, 3.5, 3.6, 3.7, 3.8

                   Darwin     8.0.0, 8.1.0, 8.2.0, 8.3.0, 8.4.0, 8.5.0, 8.6.0,
                              8.7.0, 8.8.0, 8.9.0, 8.10.0, 8.11.0, 9.0.0,
                              9.1.0, 9.2.0, 9.3.0, 9.4.0, 9.5.0, 9.6.0, 9.7.0,
                              9.8.0, 10.1.0, 10.2.0, 10.3.0, 10.4.0, 10.5.0,
                              10.6.0, 10.7.0, 10.8.0, 11.0.0, 11.1.0, 11.2.0,
                              11.3.0, 11.4.0, 11.5.0, 12.0.0, 12.1.0, 12.2.0,
                              13.0.0, 13.1.0, 13.2.0, 13.3.0, 13.4.0, 14.0.0

             For ATT, an unknown second parameter will be replaced with the
             string UNIX; for the other predefined acronyms it will be ignored
             and a warning message emitted.  Unrecognized arguments are dis-
             played as given in the page footer.  For instance, a typical
             footer might be:

                   .Os BSD 4.3

             giving `4.3 Berkeley Distribution', or for a locally produced set

                   .Os CS Department

             which will produce `CS Department'.

             If the `.Os' macro is not present, the bottom left corner of the
             manual page will be ugly.

             This macro is neither callable nor parsed.

     .Dd [<month> <day>, <year>]
             If `Dd' has no arguments, `Epoch' is used for the date string.
             If it has exactly three arguments, they are concatenated, sepa-
             rated with unbreakable space:

                   .Dd January 25, 2001

             The month's name shall not be abbreviated.

             With any other number of arguments, the current date is used, ig-
             noring the parameters.

             As a special exception, the format

                   .Dd $Mdocdate: <month> <day> <year> $

             is also recognized.  It is used in OpenBSD manuals to automati-
             cally insert the current date when committing.

             This macro is neither callable nor parsed.

IINNTTRROODDUUCCTTIIOONN OOFF MMAANNUUAALL AANNDD GGEENNEERRAALL TTEEXXTT DDOOMMAAIINNSS
   WWhhaatt''ss iinn aa NNaammee...
     The manual domain macro names are derived from the day to day informal
     language used to describe commands, subroutines and related files.
     Slightly different variations of this language are used to describe the
     three different aspects of writing a man page.  First, there is the de-
     scription of --mmddoocc macro command usage.  Second is the description of a
     UNIX command _w_i_t_h --mmddoocc macros, and third, the description of a command
     to a user in the verbal sense; that is, discussion of a command in the
     text of a man page.

     In the first case, troff(1) macros are themselves a type of command; the
     general syntax for a troff command is:

           .Xx argument1 argument2 ...

     `.Xx' is a macro command, and anything following it are arguments to be
     processed.  In the second case, the description of a UNIX command using
     the content macros is a bit more involved; a typical _S_Y_N_O_P_S_I_S command
     line might be displayed as:

           ffiilltteerr [--ffllaagg] <_i_n_f_i_l_e> <_o_u_t_f_i_l_e>

     Here, ffiilltteerr is the command name and the bracketed string --ffllaagg is a _f_l_a_g
     argument designated as optional by the option brackets.  In --mmddoocc terms,
     <_i_n_f_i_l_e> and <_o_u_t_f_i_l_e> are called _m_e_t_a _a_r_g_u_m_e_n_t_s; in this example, the
     user has to replace the meta expressions given in angle brackets with
     real file names.  Note that in this document meta arguments are used to
     describe --mmddoocc commands; in most man pages, meta variables are not
     specifically written with angle brackets.  The macros which formatted the
     above example:

           .Nm filter
           .Op Fl flag
           .Ao Ar infile Ac Ao Ar outfile Ac

     In the third case, discussion of commands and command syntax includes
     both examples above, but may add more detail.  The arguments <_i_n_f_i_l_e> and
     <_o_u_t_f_i_l_e> from the example above might be referred to as _o_p_e_r_a_n_d_s or _f_i_l_e
     _a_r_g_u_m_e_n_t_s.  Some command-line argument lists are quite long:

           mmaakkee  [--eeiikknnqqrrssttvv] [--DD _v_a_r_i_a_b_l_e] [--dd _f_l_a_g_s] [--ff _m_a_k_e_f_i_l_e] [--II
                 _d_i_r_e_c_t_o_r_y] [--jj _m_a_x___j_o_b_s] [_v_a_r_i_a_b_l_e=_v_a_l_u_e] [_t_a_r_g_e_t _._._.]

     Here one might talk about the command mmaakkee and qualify the argument,
     _m_a_k_e_f_i_l_e, as an argument to the flag, --ff, or discuss the optional file
     operand _t_a_r_g_e_t.  In the verbal context, such detail can prevent confu-
     sion, however the --mmddoocc package does not have a macro for an argument _t_o
     a flag.  Instead the `Ar' argument macro is used for an operand or file
     argument like _t_a_r_g_e_t as well as an argument to a flag like _v_a_r_i_a_b_l_e.  The
     make command line was produced from:

           .Nm make
           .Op Fl eiknqrstv
           .Op Fl D Ar variable
           .Op Fl d Ar flags
           .Op Fl f Ar makefile
           .Op Fl I Ar directory
           .Op Fl j Ar max_jobs
           .Op Ar variable Ns = Ns Ar value
           .Bk
           .Op Ar target ...
           .Ek

     The `.Bk' and `.Ek' macros are explained in _K_e_e_p_s.

   GGeenneerraall SSyynnttaaxx
     The manual domain and general text domain macros share a similar syntax
     with a few minor deviations; most notably, `.Ar', `.Fl', `.Nm', and `.Pa'
     differ only when called without arguments; and `.Fn' and `.Xr' impose an
     order on their argument lists.  All content macros are capable of recog-
     nizing and properly handling punctuation, provided each punctuation char-
     acter is separated by a leading space.  If a command is given:

           .Ar sptr, ptr),

     The result is:

           _s_p_t_r_, _p_t_r_)_,

     The punctuation is not recognized and all is output in the font used by
     `.Ar'.  If the punctuation is separated by a leading white space:

           .Ar sptr , ptr ) ,

     The result is:

           _s_p_t_r, _p_t_r),

     The punctuation is now recognized and output in the default font distin-
     guishing it from the argument strings.  To remove the special meaning
     from a punctuation character escape it with `\&'.

     The following punctuation characters are recognized by --mmddoocc:

               .         ,         :         ;         (
               )         [         ]         ?         !

     Troff is limited as a macro language, and has difficulty when presented
     with a string containing a member of the mathematical, logical or quota-
     tion set:

                 {+,-,/,*,%,<,>,<=,>=,=,==,&,`,',"}

     The problem is that troff may assume it is supposed to actually perform
     the operation or evaluation suggested by the characters.  To prevent the
     accidental evaluation of these characters, escape them with `\&'.  Typi-
     cal syntax is shown in the first content macro displayed below, `.Ad'.

MMAANNUUAALL DDOOMMAAIINN
   AAddddrreesssseess
     The address macro identifies an address construct.

           Usage: .Ad <address> ...

                    .Ad addr1           _a_d_d_r_1
                    .Ad addr1 .         _a_d_d_r_1.
                    .Ad addr1 , file2   _a_d_d_r_1, _f_i_l_e_2
                    .Ad f1 , f2 , f3 :  _f_1, _f_2, _f_3:
                    .Ad addr ) ) ,      _a_d_d_r)),

     The default width is 12n.

   AAuutthhoorr NNaammee
     The `.An' macro is used to specify the name of the author of the item be-
     ing documented, or the name of the author of the actual manual page.

           Usage: .An <author name> ...

                    .An "Joe Author"        Joe Author

                    .An "Joe Author" ,      Joe Author,

                    .An "Joe Author" Aq nobody@FreeBSD.org
                                            Joe Author <nobody@FreeBSD.org>

                    .An "Joe Author" ) ) ,  Joe Author)),

     The default width is 12n.

     In the _A_U_T_H_O_R_S section, the `.An' command causes a line break allowing
     each new name to appear on its own line.  If this is not desirable,

           .An -nosplit

     call will turn this off.  To turn splitting back on, write

           .An -split

   AArrgguummeennttss
     The .Ar argument macro may be used whenever an argument is referenced.
     If called without arguments, the `_f_i_l_e _._._.' string is output.

           Usage: .Ar [<argument>] ...

                    .Ar              _f_i_l_e _._._.
                    .Ar file1        _f_i_l_e_1
                    .Ar file1 .      _f_i_l_e_1.
                    .Ar file1 file2  _f_i_l_e_1 _f_i_l_e_2
                    .Ar f1 f2 f3 :   _f_1 _f_2 _f_3:
                    .Ar file ) ) ,   _f_i_l_e)),

     The default width is 12n.

   CCoonnffiigguurraattiioonn DDeeccllaarraattiioonn ((SSeeccttiioonn FFoouurr OOnnllyy))
     The `.Cd' macro is used to demonstrate a config(8) declaration for a de-
     vice interface in a section four manual.

           Usage: .Cd <argument> ...

                    .Cd "device le0 at scode?"  ddeevviiccee llee00 aatt ssccooddee??

     In the _S_Y_N_O_P_S_I_S section a `.Cd' command causes a line break before and
     after its arguments are printed.

     The default width is 12n.

   CCoommmmaanndd MMooddiiffiieerrss
     The command modifier is identical to the `.Fl' (flag) command with the
     exception that the `.Cm' macro does not assert a dash in front of every
     argument.  Traditionally flags are marked by the preceding dash, however,
     some commands or subsets of commands do not use them.  Command modifiers
     may also be specified in conjunction with interactive commands such as
     editor commands.  See _F_l_a_g_s.

     The default width is 10n.

   DDeeffiinneedd VVaarriiaabblleess
     A variable (or constant) which is defined in an include file is specified
     by the macro `.Dv'.

           Usage: .Dv <defined variable> ...

                    .Dv MAXHOSTNAMELEN  MAXHOSTNAMELEN
                    .Dv TIOCGPGRP )     TIOCGPGRP)

     The default width is 12n.

   EErrrrnnoo''ss
     The `.Er' errno macro specifies the error return value for section 2, 3,
     and 9 library routines.  The second example below shows `.Er' used with
     the `.Bq' general text domain macro, as it would be used in a section two
     manual page.

           Usage: .Er <errno type> ...

                    .Er ENOENT      ENOENT
                    .Er ENOENT ) ;  ENOENT);
                    .Bq Er ENOTDIR  [ENOTDIR]

     The default width is 17n.

   EEnnvviirroonnmmeenntt VVaarriiaabblleess
     The `.Ev' macro specifies an environment variable.

           Usage: .Ev <argument> ...

                    .Ev DISPLAY        DISPLAY
                    .Ev PATH .         PATH.
                    .Ev PRINTER ) ) ,  PRINTER)),

     The default width is 15n.

   FFllaaggss
     The `.Fl' macro handles command-line flags.  It prepends a dash, `-', to
     the flag.  For interactive command flags, which are not prepended with a
     dash, the `.Cm' (command modifier) macro is identical, but without the
     dash.

           Usage: .Fl <argument> ...

                    .Fl          --
                    .Fl cfv      --ccffvv
                    .Fl cfv .    --ccffvv.
                    .Cm cfv .    ccffvv.
                    .Fl s v t    --ss --vv --tt
                    .Fl - ,      ----,
                    .Fl xyz ) ,  --xxyyzz),
                    .Fl |        -- |

     The `.Fl' macro without any arguments results in a dash representing
     stdin/stdout.  Note that giving `.Fl' a single dash will result in two
     dashes.

     The default width is 12n.

   FFuunnccttiioonn DDeeccllaarraattiioonnss
     The `.Fd' macro is used in the _S_Y_N_O_P_S_I_S section with section two or three
     functions.  It is neither callable nor parsed.

           Usage: .Fd <argument> ...

                    .Fd "#include <sys/types.h>"  ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>

     In the _S_Y_N_O_P_S_I_S section a `.Fd' command causes a line break if a function
     has already been presented and a break has not occurred.  This leaves a
     nice vertical space in between the previous function call and the decla-
     ration for the next function.

     The `.In' macro, while in the _S_Y_N_O_P_S_I_S section, represents the #include
     statement, and is the short form of the above example.  It specifies the
     C header file as being included in a C program.  It also causes a line
     break.

     While not in the _S_Y_N_O_P_S_I_S section, it represents the header file enclosed
     in angle brackets.

           Usage: .In <header file>

                    .In stdio.h  <_s_t_d_i_o_._h>
                    .In stdio.h  <_s_t_d_i_o_._h>

   FFuunnccttiioonn TTyyppeess
     This macro is intended for the _S_Y_N_O_P_S_I_S section.  It may be used anywhere
     else in the man page without problems, but its main purpose is to present
     the function type in kernel normal form for the _S_Y_N_O_P_S_I_S of sections two
     and three (it causes a line break, allowing the function name to appear
     on the next line).

           Usage: .Ft <type> ...

                    .Ft struct stat  _s_t_r_u_c_t _s_t_a_t

   FFuunnccttiioonnss ((LLiibbrraarryy RRoouuttiinneess))
     The `.Fn' macro is modeled on ANSI C conventions.

           Usage: .Fn <function> [<parameter>] ...

                    .Fn getchar              ggeettcchhaarr()
                    .Fn strlen ) ,           ssttrrlleenn()),
                    .Fn align "char *ptr" ,  aalliiggnn(_c_h_a_r _*_p_t_r),

     Note that any call to another macro signals the end of the `.Fn' call (it
     will insert a closing parenthesis at that point).

     For functions with many parameters (which is rare), the macros `.Fo'
     (function open) and `.Fc' (function close) may be used with `.Fa' (func-
     tion argument).

     Example:

           .Ft int
           .Fo res_mkquery
           .Fa "int op"
           .Fa "char *dname"
           .Fa "int class"
           .Fa "int type"
           .Fa "char *data"
           .Fa "int datalen"
           .Fa "struct rrec *newrr"
           .Fa "char *buf"
           .Fa "int buflen"
           .Fc

     Produces:

           _i_n_t rreess__mmkkqquueerryy(_i_n_t _o_p, _c_h_a_r _*_d_n_a_m_e, _i_n_t _c_l_a_s_s, _i_n_t _t_y_p_e,
           _c_h_a_r _*_d_a_t_a, _i_n_t _d_a_t_a_l_e_n, _s_t_r_u_c_t _r_r_e_c _*_n_e_w_r_r, _c_h_a_r _*_b_u_f, _i_n_t _b_u_f_l_e_n)

     In the _S_Y_N_O_P_S_I_S section, the function will always begin at the beginning
     of line.  If there is more than one function presented in the _S_Y_N_O_P_S_I_S
     section and a function type has not been given, a line break will occur,
     leaving a nice vertical space between the current function name and the
     one prior.

     The default width values of `.Fn' and `.Fo' are 12n and 16n, respec-
     tively.

   FFuunnccttiioonn AArrgguummeennttss
     The `.Fa' macro is used to refer to function arguments (parameters) out-
     side of the _S_Y_N_O_P_S_I_S section of the manual or inside the _S_Y_N_O_P_S_I_S section
     if the enclosure macros `.Fo' and `.Fc' instead of `.Fn' are used.  `.Fa'
     may also be used to refer to structure members.

           Usage: .Fa <function argument> ...

                    .Fa d_namlen ) ) ,  _d___n_a_m_l_e_n)),
                    .Fa iov_len         _i_o_v___l_e_n

     The default width is 12n.

   RReettuurrnn VVaalluueess
     The `.Rv' macro generates text for use in the _R_E_T_U_R_N _V_A_L_U_E_S section.

           Usage: .Rv [-std] [<function> ...]

     For example, `.Rv -std atexit' produces:

           The aatteexxiitt() function returns the value 0 if successful; otherwise
           the value -1 is returned and the global variable _e_r_r_n_o is set to
           indicate the error.

     The --ssttdd option is valid only for manual page sections 2 and 3.  Cur-
     rently, this macro does nothing if used without the --ssttdd flag.

   EExxiitt SSttaattuuss
     The `.Ex' macro generates text for use in the _D_I_A_G_N_O_S_T_I_C_S section.

           Usage: .Ex [-std] [<utility> ...]

     For example, `.Ex -std cat' produces:

           The ccaatt utility exits 0 on success, and >0 if an error occurs.

     The --ssttdd option is valid only for manual page sections 1, 6 and 8.  Cur-
     rently, this macro does nothing if used without the --ssttdd flag.

   IInntteerraaccttiivvee CCoommmmaannddss
     The `.Ic' macro designates an interactive or internal command.

           Usage: .Ic <argument> ...

                    .Ic :wq                ::wwqq
                    .Ic "do while {...}"   ddoo wwhhiillee {{......}}
                    .Ic setenv , unsetenv  sseetteennvv, uunnsseetteennvv

     The default width is 12n.

   LLiibbrraarryy NNaammeess
     The `.Lb' macro is used to specify the library where a particular func-
     tion is compiled in.

           Usage: .Lb <argument> ...

     Available arguments to `.Lb' and their results are:

           libarchive     Reading and Writing Streaming Archives Library
                          (libarchive, -larchive)
           libarm         ARM Architecture Library (libarm, -larm)
           libarm32       ARM32 Architecture Library (libarm32, -larm32)
           libbluetooth   Bluetooth Library (libbluetooth, -lbluetooth)
           libbsm         Basic Security Module Library (libbsm, -lbsm)
           libc           Standard C Library (libc, -lc)
           libc_r         Reentrant C Library (libc_r, -lc_r)
           libcalendar    Calendar Arithmetic Library (libcalendar,
                          -lcalendar)
           libcam         Common Access Method User Library (libcam, -lcam)
           libcdk         Curses Development Kit Library (libcdk, -lcdk)
           libcipher      FreeSec Crypt Library (libcipher, -lcipher)
           libcompat      Compatibility Library (libcompat, -lcompat)
           libcrypt       Crypt Library (libcrypt, -lcrypt)
           libcurses      Curses Library (libcurses, -lcurses)
           libdevinfo     Device and Resource Information Utility Library
                          (libdevinfo, -ldevinfo)
           libdevstat     Device Statistics Library (libdevstat, -ldevstat)
           libdisk        Interface to Slice and Partition Labels Library
                          (libdisk, -ldisk)
           libdwarf       DWARF Access Library (libdwarf, -ldwarf)
           libedit        Command Line Editor Library (libedit, -ledit)
           libelf         ELF Access Library (libelf, -lelf)
           libevent       Event Notification Library (libevent, -levent)
           libfetch       File Transfer Library for URLs (libfetch, -lfetch)
           libform        Curses Form Library (libform, -lform)
           libgeom        Userland API Library for kernel GEOM subsystem
                          (libgeom, -lgeom)
           libgpib        General-Purpose Instrument Bus (GPIB) library
                          (libgpib, -lgpib)
           libi386        i386 Architecture Library (libi386, -li386)
           libintl        Internationalized Message Handling Library (libintl,
                          -lintl)
           libipsec       IPsec Policy Control Library (libipsec, -lipsec)
           libipx         IPX Address Conversion Support Library (libipx,
                          -lipx)
           libiscsi       iSCSI protocol library (libiscsi, -liscsi)
           libjail        Jail Library (libjail, -ljail)
           libkiconv      Kernel side iconv library (libkiconv, -lkiconv)
           libkse         N:M Threading Library (libkse, -lkse)
           libkvm         Kernel Data Access Library (libkvm, -lkvm)
           libm           Math Library (libm, -lm)
           libm68k        m68k Architecture Library (libm68k, -lm68k)
           libmagic       Magic Number Recognition Library (libmagic, -lmagic)
           libmd          Message Digest (MD4, MD5, etc.) Support Library
                          (libmd, -lmd)
           libmemstat     Kernel Memory Allocator Statistics Library
                          (libmemstat, -lmemstat)
           libmenu        Curses Menu Library (libmenu, -lmenu)
           libnetgraph    Netgraph User Library (libnetgraph, -lnetgraph)
           libnetpgp      Netpgp signing, verification, encryption and
                          decryption (libnetpgp, -lnetpgp)
           libossaudio    OSS Audio Emulation Library (libossaudio,
                          -lossaudio)
           libpam         Pluggable Authentication Module Library (libpam,
                          -lpam)
           libpcap        Packet Capture Library (libpcap, -lpcap)
           libpci         PCI Bus Access Library (libpci, -lpci)
           libpmc         Performance Counters Library (libpmc, -lpmc)
           libposix       POSIX Compatibility Library (libposix, -lposix)
           libprop        Property Container Object Library (libprop, -lprop)
           libpthread     POSIX Threads Library (libpthread, -lpthread)
           libpuffs       puffs Convenience Library (libpuffs, -lpuffs)
           librefuse      File System in Userspace Convenience Library
                          (librefuse, -lrefuse)
           libresolv      DNS Resolver Library (libresolv, -lresolv)
           librpcsec_gss  RPC GSS-API Authentication Library (librpcsec_gss,
                          -lrpcsec_gss)
           librpcsvc      RPC Service Library (librpcsvc, -lrpcsvc)
           librt          POSIX Real-time Library (librt, -lrt)
           libsdp         Bluetooth Service Discovery Protocol User Library
                          (libsdp, -lsdp)
           libssp         Buffer Overflow Protection Library (libssp, -lssp)
           libSystem      System Library (libSystem, -lSystem)
           libtermcap     Termcap Access Library (libtermcap, -ltermcap)
           libterminfo    Terminal Information Library (libterminfo,
                          -lterminfo)
           libthr         1:1 Threading Library (libthr, -lthr)
           libufs         UFS File System Access Library (libufs, -lufs)
           libugidfw      File System Firewall Interface Library (libugidfw,
                          -lugidfw)
           libulog        User Login Record Library (libulog, -lulog)
           libusbhid      USB Human Interface Devices Library (libusbhid,
                          -lusbhid)
           libutil        System Utilities Library (libutil, -lutil)
           libvgl         Video Graphics Library (libvgl, -lvgl)
           libx86_64      x86_64 Architecture Library (libx86_64, -lx86_64)
           libz           Compression Library (libz, -lz)

     Local, OS-specific additions might be found in the file _m_d_o_c_._l_o_c_a_l; look
     for strings named `str-Lb-XXX'.  `XXX' then denotes the keyword to be
     used with the `.Lb' macro.

     In the _L_I_B_R_A_R_Y section an `.Lb' command causes a line break before and
     after its arguments are printed.

   LLiitteerraallss
     The `.Li' literal macro may be used for special characters, variable con-
     stants, etc. - anything which should be displayed as it would be typed.

           Usage: .Li <argument> ...

                    .Li \en          \n
                    .Li M1 M2 M3 ;   M1 M2 M3;
                    .Li cntrl-D ) ,  cntrl-D),
                    .Li 1024 ...     1024 ...

     The default width is 16n.

   NNaammeess
     The `.Nm' macro is used for the document title or subject name.  It has
     the peculiarity of remembering the first argument it was called with,
     which should always be the subject name of the page.  When called without
     arguments, `.Nm' regurgitates this initial name for the sole purpose of
     making less work for the author.  `.Nm' causes a line break within the
     _S_Y_N_O_P_S_I_S section.

     Note: A section two or three document function name is addressed with the
     `.Nm' in the _N_A_M_E section, and with `.Fn' in the _S_Y_N_O_P_S_I_S and remaining
     sections.  For interactive commands, such as the `while' command keyword
     in csh(1), the `.Ic' macro should be used.  While `.Ic' is nearly identi-
     cal to `.Nm', it can not recall the first argument it was invoked with.

           Usage: .Nm [<argument>] ...

                    .Nm groff_mdoc  ggrrooffff__mmddoocc
                    .Nm \-mdoc      --mmddoocc
                    .Nm foo ) ) ,   ffoooo)),
                    .Nm :           ggrrooffff__mmddoocc:

     The default width is 10n.

   OOppttiioonnss
     The `.Op' macro places option brackets around any remaining arguments on
     the command line, and places any trailing punctuation outside the brack-
     ets.  The macros `.Oo' and `.Oc' (which produce an opening and a closing
     option bracket respectively) may be used across one or more lines or to
     specify the exact position of the closing parenthesis.

           Usage: .Op [<option>] ...

                    .Op                                []
                    .Op Fl k                           [--kk]
                    .Op Fl k ) .                       [--kk]).
                    .Op Fl k Ar kookfile               [--kk _k_o_o_k_f_i_l_e]
                    .Op Fl k Ar kookfile ,             [--kk _k_o_o_k_f_i_l_e],
                    .Op Ar objfil Op Ar corfil         [_o_b_j_f_i_l [_c_o_r_f_i_l]]
                    .Op Fl c Ar objfil Op Ar corfil ,  [--cc _o_b_j_f_i_l [_c_o_r_f_i_l]],
                    .Op word1 word2                    [word1 word2]
                    .Li .Op Oo Ao option Ac Oc ...     .Op [<option>] ...

     Here a typical example of the `.Oo' and `.Oc' macros:

           .Oo
           .Op Fl k Ar kilobytes
           .Op Fl i Ar interval
           .Op Fl c Ar count
           .Oc

     Produces:

           [[--kk _k_i_l_o_b_y_t_e_s] [--ii _i_n_t_e_r_v_a_l] [--cc _c_o_u_n_t]]

     The default width values of `.Op' and `.Oo' are 14n and 10n, respec-
     tively.

   PPaatthhnnaammeess
     The `.Pa' macro formats path or file names.  If called without arguments,
     the `_~' string is output, which represents the current user's home direc-
     tory.

           Usage: .Pa [<pathname>] ...

                    .Pa                    _~
                    .Pa /usr/share         _/_u_s_r_/_s_h_a_r_e
                    .Pa /tmp/fooXXXXX ) .  _/_t_m_p_/_f_o_o_X_X_X_X_X).

     The default width is 32n.

   SSttaannddaarrddss
     The `.St' macro replaces standard abbreviations with their formal names.

           Usage: .St <abbreviation> ...

     Available pairs for "Abbreviation/Formal Name" are:

     ANSI/ISO C

           -ansiC          ANSI X3.159-1989 ("ANSI C89")
           -ansiC-89       ANSI X3.159-1989 ("ANSI C89")
           -isoC           ISO/IEC 9899:1990 ("ISO C90")
           -isoC-90        ISO/IEC 9899:1990 ("ISO C90")
           -isoC-99        ISO/IEC 9899:1999 ("ISO C99")
           -isoC-2011      ISO/IEC 9899:2011 ("ISO C11")

     POSIX Part 1: System API

           -iso9945-1-90   ISO/IEC 9945-1:1990 ("POSIX.1")
           -iso9945-1-96   ISO/IEC 9945-1:1996 ("POSIX.1")
           -p1003.1        IEEE Std 1003.1 ("POSIX.1")
           -p1003.1-88     IEEE Std 1003.1-1988 ("POSIX.1")
           -p1003.1-90     ISO/IEC 9945-1:1990 ("POSIX.1")
           -p1003.1-96     ISO/IEC 9945-1:1996 ("POSIX.1")
           -p1003.1b-93    IEEE Std 1003.1b-1993 ("POSIX.1")
           -p1003.1c-95    IEEE Std 1003.1c-1995 ("POSIX.1")
           -p1003.1g-2000  IEEE Std 1003.1g-2000 ("POSIX.1")
           -p1003.1i-95    IEEE Std 1003.1i-1995 ("POSIX.1")
           -p1003.1-2001   IEEE Std 1003.1-2001 ("POSIX.1")
           -p1003.1-2004   IEEE Std 1003.1-2004 ("POSIX.1")
           -p1003.1-2008   IEEE Std 1003.1-2008 ("POSIX.1")

     POSIX Part 2: Shell and Utilities

           -iso9945-2-93   ISO/IEC 9945-2:1993 ("POSIX.2")
           -p1003.2        IEEE Std 1003.2 ("POSIX.2")
           -p1003.2-92     IEEE Std 1003.2-1992 ("POSIX.2")
           -p1003.2a-92    IEEE Std 1003.2a-1992 ("POSIX.2")

     X/Open

           -susv2          Version 2 of the Single UNIX Specification
                           ("SUSv2")
           -susv3          Version 3 of the Single UNIX Specification
                           ("SUSv3")
           -svid4          System V Interface Definition, Fourth Edition
                           ("SVID4")
           -xbd5           X/Open Base Definitions Issue 5 ("XBD5")
           -xcu5           X/Open Commands and Utilities Issue 5 ("XCU5")
           -xcurses4.2     X/Open Curses Issue 4, Version 2 ("XCURSES4.2")
           -xns5           X/Open Networking Services Issue 5 ("XNS5")
           -xns5.2         X/Open Networking Services Issue 5.2 ("XNS5.2")
           -xpg3           X/Open Portability Guide Issue 3 ("XPG3")
           -xpg4           X/Open Portability Guide Issue 4 ("XPG4")
           -xpg4.2         X/Open Portability Guide Issue 4, Version 2
                           ("XPG4.2")
           -xsh5           X/Open System Interfaces and Headers Issue 5
                           ("XSH5")

     Miscellaneous

           -ieee754        IEEE Std 754-1985
           -iso8601        ISO 8601
           -iso8802-3      ISO/IEC 8802-3:1989

   VVaarriiaabbllee TTyyppeess
     The `.Vt' macro may be used whenever a type is referenced.  In the
     _S_Y_N_O_P_S_I_S section, it causes a line break (useful for old style variable
     declarations).

           Usage: .Vt <type> ...

                    .Vt extern char *optarg ;  _e_x_t_e_r_n _c_h_a_r _*_o_p_t_a_r_g;
                    .Vt FILE *                 _F_I_L_E _*

   VVaarriiaabblleess
     Generic variable reference.

           Usage: .Va <variable> ...

                    .Va count             _c_o_u_n_t
                    .Va settimer ,        _s_e_t_t_i_m_e_r,
                    .Va "int *prt" ) :    _i_n_t _*_p_r_t):
                    .Va "char s" ] ) ) ,  _c_h_a_r _s])),

     The default width is 12n.

   MMaannuuaall PPaaggee CCrroossss RReeffeerreenncceess
     The `.Xr' macro expects the first argument to be a manual page name.  The
     optional second argument, if a string (defining the manual section), is
     put into parentheses.

           Usage: .Xr <man page name> [<section>] ...

                    .Xr mdoc        mdoc
                    .Xr mdoc ,      mdoc,
                    .Xr mdoc 7      mdoc(7)
                    .Xr xinit 1x ;  xinit(1x);

     The default width is 10n.

GGEENNEERRAALL TTEEXXTT DDOOMMAAIINN
   AATT&&TT MMaaccrroo
           Usage: .At [<version>] ...

                    .At       AT&T UNIX
                    .At v6 .  Version 6 AT&T UNIX.

     The following values for <version> are possible:

           32v, v1, v2, v3, v4, v5, v6, v7, III, V, V.1, V.2, V.3, V.4

   BBSSDD MMaaccrroo
           Usage: .Bx {-alpha | -beta | -devel} ...
                  .Bx [<version> [<release>]] ...

                    .Bx         BSD
                    .Bx 4.3 .   4.3BSD.
                    .Bx -devel  BSD (currently under development)

     <version> will be prepended to the string `BSD'.  The following values
     for <release> are possible:

           Reno, reno, Tahoe, tahoe, Lite, lite, Lite2, lite2

   NNeettBBSSDD MMaaccrroo
           Usage: .Nx [<version>] ...

                    .Nx        NetBSD
                    .Nx 1.4 .  NetBSD 1.4.

     For possible values of <version> see the description of the `.Os' command
     above in section _T_I_T_L_E _M_A_C_R_O_S.

   FFrreeeeBBSSDD MMaaccrroo
           Usage: .Fx [<version>] ...

                    .Fx        FreeBSD
                    .Fx 2.2 .  FreeBSD 2.2.

     For possible values of <version> see the description of the `.Os' command
     above in section _T_I_T_L_E _M_A_C_R_O_S.

   DDrraaggoonnFFllyy MMaaccrroo
           Usage: .Dx [<version>] ...

                    .Dx        DragonFly
                    .Dx 1.4 .  DragonFly 1.4.

     For possible values of <version> see the description of the `.Os' command
     above in section _T_I_T_L_E _M_A_C_R_O_S.

   OOppeennBBSSDD MMaaccrroo
           Usage: .Ox [<version>] ...

                    .Ox 1.0  OpenBSD 1.0

   BBSSDD//OOSS MMaaccrroo
           Usage: .Bsx [<version>] ...

                    .Bsx 1.0  BSD/OS 1.0

   UUNNIIXX MMaaccrroo
           Usage: .Ux ...

                    .Ux  UNIX

   EEmmpphhaassiiss MMaaccrroo
     Text may be stressed or emphasized with the `.Em' macro.  The usual font
     for emphasis is italic.

           Usage: .Em <argument> ...

                    .Em does not          _d_o_e_s _n_o_t
                    .Em exceed 1024 .     _e_x_c_e_e_d _1_0_2_4.
                    .Em vide infra ) ) ,  _v_i_d_e _i_n_f_r_a)),

     The default width is 10n.

   FFoonntt MMooddee
     The `.Bf' font mode must be ended with the `.Ef' macro (the latter takes
     no arguments).  Font modes may be nested within other font modes.

     `.Bf' has the following syntax:

           .Bf <font mode>

     <font mode> must be one of the following three types:

           EEmm | --eemmpphhaassiiss  Same as if the `.Em' macro was used for the entire
                           block of text.
           LLii | --lliitteerraall   Same as if the `.Li' macro was used for the entire
                           block of text.
           SSyy | --ssyymmbboolliicc  Same as if the `.Sy' macro was used for the entire
                           block of text.

     Both macros are neither callable nor parsed.

   EEnncclloossuurree aanndd QQuuoottiinngg MMaaccrrooss
     The concept of enclosure is similar to quoting.  The object being to en-
     close one or more strings between a pair of characters like quotes or
     parentheses.  The terms quoting and enclosure are used interchangeably
     throughout this document.  Most of the one-line enclosure macros end in
     small letter `q' to give a hint of quoting, but there are a few irregu-
     larities.  For each enclosure macro there is also a pair of open and
     close macros which end in small letters `o' and `c' respectively.

     QQuuoottee   OOppeenn   CClloossee   FFuunnccttiioonn                  RReessuulltt
     .Aq     .Ao    .Ac     Angle Bracket Enclosure   <string>
     .Bq     .Bo    .Bc     Bracket Enclosure         [string]
     .Brq    .Bro   .Brc    Brace Enclosure           {string}
     .Dq     .Do    .Dc     Double Quote              "string"
     .Eq     .Eo    .Ec     Enclose String (in XX)    XXstring
     .Pq     .Po    .Pc     Parenthesis Enclosure     (string)
     .Ql                    Quoted Literal            "string" or string
     .Qq     .Qo    .Qc     Straight Double Quote     "string"
     .Sq     .So    .Sc     Single Quote              'string'

     All macros ending with `q' and `o' have a default width value of 12n.

     .Eo, .Ec  These macros expect the first argument to be the opening and
               closing strings respectively.

     .Es, .En  Due to the nine-argument limit in the original troff program
               two other macros have been implemented which are now rather ob-
               solete: `.Es' takes the first and second parameter as the left
               and right enclosure string, which are then used to enclose the
               arguments of `.En'.  The default width value is 12n for both
               macros.

     .Eq       The first and second arguments of this macro are the opening
               and closing strings respectively, followed by the arguments to
               be enclosed.

     .Ql       The quoted literal macro behaves differently in troff and nroff
               mode.  If formatted with nroff, a quoted literal is always
               quoted.  If formatted with troff, an item is only quoted if the
               width of the item is less than three constant width characters.
               This is to make short strings more visible where the font
               change to literal (constant width) is less noticeable.

               The default width is 16n.

     .Pf       The prefix macro suppresses the whitespace between its first
               and second argument:

                     .Pf ( Fa name2  (_n_a_m_e_2

               The default width is 12n.

               The `.Ns' macro (see below) performs the analogous suffix func-
               tion.

     .Ap       The `.Ap' macro inserts an apostrophe and exits any special
               text modes, continuing in `.No' mode.

     Examples of quoting:

           .Aq                      <>
           .Aq Pa ctype.h ) ,       <_c_t_y_p_e_._h>),
           .Bq                      []
           .Bq Em Greek , French .  [_G_r_e_e_k, _F_r_e_n_c_h].
           .Dq                      ""
           .Dq string abc .         "string abc".
           .Dq '^[A-Z]'             "'^[A-Z]'"
           .Ql man mdoc             `man mdoc'
           .Qq                      ""
           .Qq string ) ,           "string"),
           .Qq string Ns ),         "string),"
           .Sq                      `'
           .Sq string               `string'
           .Em or Ap ing            _o_r'ing

     For a good example of nested enclosure macros, see the `.Op' option
     macro.  It was created from the same underlying enclosure macros as those
     presented in the list above.  The `.Xo' and `.Xc' extended argument list
     macros are discussed below.

   NNoo--OOpp oorr NNoorrmmaall TTeexxtt MMaaccrroo
     The `.No' macro can be used in a macro command line for parameters which
     should _n_o_t be formatted.  Be careful to add `\&' to the word `No' if you
     really want that English word (and not the macro) as a parameter.

           Usage: .No <argument> ...

                    .No test Ta with Ta tabs  test     with     tabs

     The default width is 12n.

   NNoo--SSppaaccee MMaaccrroo
     The `.Ns' macro suppresses insertion of a space between the current posi-
     tion and its first parameter.  For example, it is useful for old style
     argument lists where there is no space between the flag and argument:

           Usage: ... <argument> Ns [<argument>] ...
                  .Ns <argument> ...

                    .Op Fl I Ns Ar directory  [--II_d_i_r_e_c_t_o_r_y]

     Note: The `.Ns' macro always invokes the `.No' macro after eliminating
     the space unless another macro name follows it.  If used as a command
     (i.e., the second form above in the `Usage' line), `.Ns' is identical to
     `.No'.

   SSeeccttiioonn CCrroossss RReeffeerreenncceess
     The `.Sx' macro designates a reference to a section header within the
     same document.

           Usage: .Sx <section reference> ...

                    .Sx FILES  _F_I_L_E_S

     The default width is 16n.

   SSyymmbboolliiccss
     The symbolic emphasis macro is generally a boldface macro in either the
     symbolic sense or the traditional English usage.

           Usage: .Sy <symbol> ...

                    .Sy Important Notice  IImmppoorrttaanntt NNoottiiccee

     The default width is 6n.

   MMaatthheemmaattiiccaall SSyymmbboollss
     Use this macro for mathematical symbols and similar things.

           Usage: .Ms <math symbol> ...

                    .Ms sigma  ssiiggmmaa

     The default width is 6n.

   RReeffeerreenncceess aanndd CCiittaattiioonnss
     The following macros make a modest attempt to handle references.  At
     best, the macros make it convenient to manually drop in a subset of
     refer(1) style references.

           .Rs     Reference start (does not take arguments).  Causes a line
                   break in the _S_E_E _A_L_S_O section and begins collection of ref-
                   erence information until the reference end macro is read.
           .Re     Reference end (does not take arguments).  The reference is
                   printed.
           .%A     Reference author name; one name per invocation.
           .%B     Book title.
           .%C     City/place.
           .%D     Date.
           .%I     Issuer/publisher name.
           .%J     Journal name.
           .%N     Issue number.
           .%O     Optional information.
           .%P     Page number.
           .%Q     Corporate or foreign author.
           .%R     Report name.
           .%T     Title of article.
           .%U     Optional hypertext reference.
           .%V     Volume.

     Macros beginning with `%' are not callable but accept multiple arguments
     in the usual way.  Only the `.Tn' macro is handled properly as a parame-
     ter; other macros will cause strange output.  `.%B' and `.%T' can be used
     outside of the `.Rs/.Re' environment.

     Example:

           .Rs
           .%A "Matthew Bar"
           .%A "John Foo"
           .%T "Implementation Notes on foobar(1)"
           .%R "Technical Report ABC-DE-12-345"
           .%Q "Drofnats College"
           .%C "Nowhere"
           .%D "April 1991"
           .Re

     produces

           Matthew Bar and John Foo, _I_m_p_l_e_m_e_n_t_a_t_i_o_n _N_o_t_e_s _o_n _f_o_o_b_a_r_(_1_),
           Technical Report ABC-DE-12-345, Drofnats College, Nowhere, April
           1991.

   TTrraaddee NNaammeess ((oorr AAccrroonnyymmss aanndd TTyyppee NNaammeess))
     The trade name macro prints its arguments in a smaller font.  Its in-
     tended use is to imitate a small caps fonts for uppercase acronyms.

           Usage: .Tn <symbol> ...

                    .Tn DEC    DEC
                    .Tn ASCII  ASCII

     The default width is 10n.

   EExxtteennddeedd AArrgguummeennttss
     The .Xo and .Xc macros allow one to extend an argument list on a macro
     boundary for the `.It' macro (see below).  Note that .Xo and .Xc are im-
     plemented similarly to all other macros opening and closing an enclosure
     (without inserting characters, of course).  This means that the following
     is true for those macros also.

     Here is an example of `.Xo' using the space mode macro to turn spacing
     off:

           .Sm off
           .It Xo Sy I Ar operation
           .No \en Ar count No \en
           .Xc
           .Sm on

     produces

           II_o_p_e_r_a_t_i_o_n\n_c_o_u_n_t\n

     Another one:

           .Sm off
           .It Cm S No / Ar old_pattern Xo
           .No / Ar new_pattern
           .No / Op Cm g
           .Xc
           .Sm on

     produces

           SS/_o_l_d___p_a_t_t_e_r_n/_n_e_w___p_a_t_t_e_r_n/[gg]

     Another example of `.Xo' and enclosure macros: Test the value of a vari-
     able.

           .It Xo
           .Ic .ifndef
           .Oo \&! Oc Ns Ar variable Oo
           .Ar operator variable ...
           .Oc Xc

     produces

           ..iiffnnddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]

PPAAGGEE SSTTRRUUCCTTUURREE DDOOMMAAIINN
   SSeeccttiioonn HHeeaaddeerrss
     The following `.Sh' section header macros are required in every man page.
     The remaining section headers are recommended at the discretion of the
     author writing the manual page.  The `.Sh' macro is parsed but not gener-
     ally callable.  It can be used as an argument in a call to `.Sh' only; it
     then reactivates the default font for `.Sh'.

     The default width is 8n.

     .Sh NAME           The `.Sh NAME' macro is mandatory.  If not specified,
                        headers, footers and page layout defaults will not be
                        set and things will be rather unpleasant.  The _N_A_M_E
                        section consists of at least three items.  The first
                        is the `.Nm' name macro naming the subject of the man
                        page.  The second is the name description macro,
                        `.Nd', which separates the subject name from the third
                        item, which is the description.  The description
                        should be the most terse and lucid possible, as the
                        space available is small.

                        `.Nd' first prints `-', then all its arguments.

     .Sh LIBRARY        This section is for section two and three function
                        calls.  It should consist of a single `.Lb' macro
                        call; see _L_i_b_r_a_r_y _N_a_m_e_s.

     .Sh SYNOPSIS       The _S_Y_N_O_P_S_I_S section describes the typical usage of
                        the subject of a man page.  The macros required are
                        either `.Nm', `.Cd', or `.Fn' (and possibly `.Fo',
                        `.Fc', `.Fd', and `.Ft').  The function name macro
                        `.Fn' is required for manual page sections 2 and 3;
                        the command and general name macro `.Nm' is required
                        for sections 1, 5, 6, 7, and 8.  Section 4 manuals re-
                        quire a `.Nm', `.Fd' or a `.Cd' configuration device
                        usage macro.  Several other macros may be necessary to
                        produce the synopsis line as shown below:

                              ccaatt [--bbeennssttuuvv] [--] _f_i_l_e _._._.

                        The following macros were used:

                              .Nm cat
                              .Op Fl benstuv
                              .Op Fl
                              .Ar

     .Sh DESCRIPTION    In most cases the first text in the _D_E_S_C_R_I_P_T_I_O_N sec-
                        tion is a brief paragraph on the command, function or
                        file, followed by a lexical list of options and re-
                        spective explanations.  To create such a list, the
                        `.Bl' (begin list), `.It' (list item) and `.El' (end
                        list) macros are used (see _L_i_s_t_s _a_n_d _C_o_l_u_m_n_s below).

     .Sh IMPLEMENTATION NOTES
                        Implementation specific information should be placed
                        here.

     .Sh RETURN VALUES  Sections 2, 3 and 9 function return values should go
                        here.  The `.Rv' macro may be used to generate text
                        for use in the _R_E_T_U_R_N _V_A_L_U_E_S section for most section
                        2 and 3 library functions; see _R_e_t_u_r_n _V_a_l_u_e_s.

     The following `.Sh' section headers are part of the preferred manual page
     layout and must be used appropriately to maintain consistency.  They are
     listed in the order in which they would be used.

     .Sh ENVIRONMENT    The _E_N_V_I_R_O_N_M_E_N_T section should reveal any related en-
                        vironment variables and clues to their behavior and/or
                        usage.

     .Sh FILES          Files which are used or created by the man page sub-
                        ject should be listed via the `.Pa' macro in the _F_I_L_E_S
                        section.

     .Sh EXAMPLES       There are several ways to create examples.  See the
                        _E_x_a_m_p_l_e_s _a_n_d _D_i_s_p_l_a_y_s section below for details.

     .Sh DIAGNOSTICS    Diagnostic messages from a command should be placed in
                        this section.  The `.Ex' macro may be used to generate
                        text for use in the _D_I_A_G_N_O_S_T_I_C_S section for most sec-
                        tion 1, 6 and 8 commands; see _E_x_i_t _S_t_a_t_u_s.

     .Sh COMPATIBILITY  Known compatibility issues (e.g. deprecated options or
                        parameters) should be listed here.

     .Sh ERRORS         Specific error handling, especially from library func-
                        tions (man page sections 2, 3, and 9) should go here.
                        The `.Er' macro is used to specify an error (errno).

     .Sh SEE ALSO       References to other material on the man page topic and
                        cross references to other relevant man pages should be
                        placed in the _S_E_E _A_L_S_O section.  Cross references are
                        specified using the `.Xr' macro.  Currently refer(1)
                        style references are not accommodated.

                        It is recommended that the cross references are sorted
                        on the section number, then alphabetically on the
                        names within a section, and placed in that order and
                        comma separated.  Example:

                        ls(1), ps(1), group(5), passwd(5)

     .Sh STANDARDS      If the command, library function or file adheres to a
                        specific implementation such as IEEE Std 1003.2
                        ("POSIX.2") or ANSI X3.159-1989 ("ANSI C89") this
                        should be noted here.  If the command does not adhere
                        to any standard, its history should be noted in the
                        _H_I_S_T_O_R_Y section.

     .Sh HISTORY        Any command which does not adhere to any specific
                        standards should be outlined historically in this sec-
                        tion.

     .Sh AUTHORS        Credits should be placed here.  Use the `.An' macro
                        for names and the `.Aq' macro for e-mail addresses
                        within optional contact information.  Explicitly indi-
                        cate whether the person authored the initial manual
                        page or the software or whatever the person is being
                        credited for.

     .Sh BUGS           Blatant problems with the topic go here.

     User-specified `.Sh' sections may be added; for example, this section was
     set with:

                    .Sh "PAGE STRUCTURE DOMAIN"

   SSuubbsseeccttiioonn HHeeaaddeerrss
     Subsection headers have exactly the same syntax as section headers: `.Ss'
     is parsed but not generally callable.  It can be used as an argument in a
     call to `.Ss' only; it then reactivates the default font for `.Ss'.

     The default width is 8n.

   PPaarraaggrraapphhss aanndd LLiinnee SSppaacciinngg
     .Pp  The `.Pp' paragraph command may be used to specify a line space
          where necessary.  The macro is not necessary after a `.Sh' or `.Ss'
          macro or before a `.Bl' or `.Bd' macro (which both assert a vertical
          distance unless the --ccoommppaacctt flag is given).

          The macro is neither callable nor parsed and takes no arguments; an
          alternative name is `.Lp'.

   KKeeeeppss
     The only keep that is implemented at this time is for words.  The macros
     are `.Bk' (begin keep) and `.Ek' (end keep).  The only option that `.Bk'
     accepts currently is --wwoorrddss (this is also the default if no option is
     given) which is useful for preventing line breaks in the middle of op-
     tions.  In the example for the make command-line arguments (see _W_h_a_t_'_s _i_n
     _a _N_a_m_e), the keep prevented nroff from placing up the flag and the argu-
     ment on separate lines.

     Both macros are neither callable nor parsed.

     More work needs to be done with the keep macros; specifically, a --lliinnee
     option should be added.

   EExxaammpplleess aanndd DDiissppllaayyss
     There are seven types of displays.

     .D1  (This is D-one.)  Display one line of indented text.  This macro is
          parsed but not callable.

                --llddgghhffssttrruu

          The above was produced by: .D1 Fl ldghfstru.

     .Dl  (This is D-ell.)  Display one line of indented _l_i_t_e_r_a_l text.  The
          `.Dl' example macro has been used throughout this file.  It allows
          the indentation (display) of one line of text.  Its default font is
          set to constant width (literal).  `.Dl' is parsed but not callable.

                % ls -ldg /usr/local/bin

          The above was produced by: .Dl % ls \-ldg /usr/local/bin.

     .Bd  Begin display.  The `.Bd' display must be ended with the `.Ed'
          macro.  It has the following syntax:

                .Bd {-literal | -filled | -unfilled | -ragged | -centered}
                     [-offset <string>] [-file <file name>] [-compact]

          --rraaggggeedd            Fill, but do not adjust the right margin (only
                             left-justify).
          --cceenntteerreedd          Center lines between the current left and right
                             margin.  Note that each single line is centered.
          --uunnffiilllleedd          Do not fill; display a block of text as typed,
                             using line breaks as specified by the user.  This
                             can produce overlong lines without warning mes-
                             sages.
          --ffiilllleedd            Display a filled block.  The block of text is
                             formatted (i.e., the text is justified on both
                             the left and right side).
          --lliitteerraall           Display block with literal font (usually fixed-
                             width).  Useful for source code or simple tabbed
                             or spaced text.
          --ffiillee <_f_i_l_e _n_a_m_e>  The file whose name follows the --ffiillee flag is
                             read and displayed before any data enclosed with
                             `.Bd' and `.Ed', using the selected display type.
                             Any troff/--mmddoocc commands in the file will be pro-
                             cessed.
          --ooffffsseett <_s_t_r_i_n_g>   If --ooffffsseett is specified with one of the following
                             strings, the string is interpreted to indicate
                             the level of indentation for the forthcoming
                             block of text:

                             _l_e_f_t        Align block on the current left mar-
                                         gin; this is the default mode of
                                         `.Bd'.
                             _c_e_n_t_e_r      Supposedly center the block.  At this
                                         time unfortunately, the block merely
                                         gets left aligned about an imaginary
                                         center margin.
                             _i_n_d_e_n_t      Indent by one default indent value or
                                         tab.  The default indent value is
                                         also used for the `.D1' and `.Dl'
                                         macros, so one is guaranteed the two
                                         types of displays will line up.  The
                                         indentation value is normally set
                                         to 6n or about two thirds of an inch
                                         (six constant width characters).
                             _i_n_d_e_n_t_-_t_w_o  Indent two times the default indent
                                         value.
                             _r_i_g_h_t       This _l_e_f_t aligns the block about two
                                         inches from the right side of the
                                         page.  This macro needs work and per-
                                         haps may never do the right thing
                                         within troff.

                             If <string> is a valid numeric expression instead
                             (_w_i_t_h _a _s_c_a_l_e _i_n_d_i_c_a_t_o_r _o_t_h_e_r _t_h_a_n `_u'), use that
                             value for indentation.  The most useful scale in-
                             dicators are `m' and `n', specifying the so-
                             called _E_m and _E_n _s_q_u_a_r_e.  This is approximately
                             the width of the letters `m' and `n' respectively
                             of the current font (for nroff output, both scale
                             indicators give the same values).  If <string>
                             isn't a numeric expression, it is tested whether
                             it is an --mmddoocc macro name, and the default offset
                             value associated with this macro is used.  Fi-
                             nally, if all tests fail, the width of <string>
                             (typeset with a fixed-width font) is taken as the
                             offset.
          --ccoommppaacctt           Suppress insertion of vertical space before begin
                             of display.

     .Ed  End display (takes no arguments).

   LLiissttss aanndd CCoolluummnnss
     There are several types of lists which may be initiated with the `.Bl'
     begin-list macro.  Items within the list are specified with the `.It'
     item macro, and each list must end with the `.El' macro.  Lists may be
     nested within themselves and within displays.  The use of columns inside
     of lists or lists inside of columns is unproven.

     In addition, several list attributes may be specified such as the width
     of a tag, the list offset, and compactness (blank lines between items al-
     lowed or disallowed).  Most of this document has been formatted with a
     tag style list (--ttaagg).

     It has the following syntax forms:

           .Bl {-hang | -ohang | -tag | -diag | -inset} [-width <string>]
                [-offset <string>] [-compact]
           .Bl -column [-offset <string>] <string1> <string2> ...
           .Bl {-item | -enum [-nested] | -bullet | -hyphen | -dash} [-offset
                <string>] [-compact]

     And now a detailed description of the list types.

     --bbuulllleett  A bullet list.

                    .Bl -bullet -offset indent -compact
                    .It
                    Bullet one goes here.
                    .It
                    Bullet two here.
                    .El

              Produces:

                    ++oo   Bullet one goes here.
                    ++oo   Bullet two here.

     --ddaasshh (or --hhyypphheenn)
              A dash list.

                    .Bl -dash -offset indent -compact
                    .It
                    Dash one goes here.
                    .It
                    Dash two here.
                    .El

              Produces:

                    --   Dash one goes here.
                    --   Dash two here.

     --eennuumm    An enumerated list.

                    .Bl -enum -offset indent -compact
                    .It
                    Item one goes here.
                    .It
                    And item two here.
                    .El

              The result:

                    1.   Item one goes here.
                    2.   And item two here.

              If you want to nest enumerated lists, use the --nneesstteedd flag
              (starting with the second-level list):

                    .Bl -enum -offset indent -compact
                    .It
                    Item one goes here
                    .Bl -enum -nested -compact
                    .It
                    Item two goes here.
                    .It
                    And item three here.
                    .El
                    .It
                    And item four here.
                    .El

              Result:

                    1.   Item one goes here.
                         1.1.   Item two goes here.
                         1.2.   And item three here.
                    2.   And item four here.

     --iitteemm    A list of type --iitteemm without list markers.

                    .Bl -item -offset indent
                    .It
                    Item one goes here.
                    Item one goes here.
                    Item one goes here.
                    .It
                    Item two here.
                    Item two here.
                    Item two here.
                    .El

              Produces:

                    Item one goes here.  Item one goes here.  Item one goes
                    here.

                    Item two here.  Item two here.  Item two here.

     --ttaagg     A list with tags.  Use --wwiiddtthh to specify the tag width.

                    SL    sleep time of the process (seconds blocked)
                    PAGEIN
                          number of disk I/O's resulting from references by
                          the process to pages not loaded in core.
                    UID   numerical user-id of process owner
                    PPID  numerical id of parent of process priority (non-pos-
                          itive when in non-interruptible wait)

              The raw text:

                    .Bl -tag -width "PPID" -compact -offset indent
                    .It SL
                    sleep time of the process (seconds blocked)
                    .It PAGEIN
                    number of disk
                    .Tn I/O Ns 's
                    resulting from references by the process
                    to pages not loaded in core.
                    .It UID
                    numerical user-id of process owner
                    .It PPID
                    numerical id of parent of process priority
                    (non-positive when in non-interruptible wait)
                    .El

     --ddiiaagg    Diag lists create section four diagnostic lists and are similar
              to inset lists except callable macros are ignored.  The --wwiiddtthh
              flag is not meaningful in this context.

              Example:

                    .Bl -diag
                    .It You can't use Sy here.
                    The message says all.
                    .El

              produces

              YYoouu ccaann''tt uussee SSyy hheerree..  The message says all.

     --hhaanngg    A list with hanging tags.

                    _H_a_n_g_e_d  labels appear similar to tagged lists when the la-
                            bel is smaller than the label width.

                    _L_o_n_g_e_r _h_a_n_g_e_d _l_i_s_t _l_a_b_e_l_s blend into the paragraph unlike
                            tagged paragraph labels.

              And the unformatted text which created it:

                    .Bl -hang -offset indent
                    .It Em Hanged
                    labels appear similar to tagged lists when the
                    label is smaller than the label width.
                    .It Em Longer hanged list labels
                    blend into the paragraph unlike
                    tagged paragraph labels.
                    .El

     --oohhaanngg   Lists with overhanging tags do not use indentation for the
              items; tags are written to a separate line.

                    SSLL
                    sleep time of the process (seconds blocked)

                    PPAAGGEEIINN
                    number of disk I/O's resulting from references by the
                    process to pages not loaded in core.

                    UUIIDD
                    numerical user-id of process owner

                    PPPPIIDD
                    numerical id of parent of process priority (non-positive
                    when in non-interruptible wait)

              The raw text:

                    .Bl -ohang -offset indent
                    .It Sy SL
                    sleep time of the process (seconds blocked)
                    .It Sy PAGEIN
                    number of disk
                    .Tn I/O Ns 's
                    resulting from references by the process
                    to pages not loaded in core.
                    .It Sy UID
                    numerical user-id of process owner
                    .It Sy PPID
                    numerical id of parent of process priority
                    (non-positive when in non-interruptible wait)
                    .El

     --iinnsseett   Here is an example of inset labels:

                    _T_a_g The tagged list (also called a tagged paragraph) is
                    the most common type of list used in the Berkeley manuals.
                    Use a --wwiiddtthh attribute as described below.

                    _D_i_a_g Diag lists create section four diagnostic lists and
                    are similar to inset lists except callable macros are ig-
                    nored.

                    _H_a_n_g Hanged labels are a matter of taste.

                    _O_h_a_n_g Overhanging labels are nice when space is con-
                    strained.

                    _I_n_s_e_t Inset labels are useful for controlling blocks of
                    paragraphs and are valuable for converting --mmddoocc manuals
                    to other formats.

              Here is the source text which produced the above example:

                    .Bl -inset -offset indent
                    .It Em Tag
                    The tagged list (also called a tagged paragraph)
                    is the most common type of list used in the
                    Berkeley manuals.
                    .It Em Diag
                    Diag lists create section four diagnostic lists
                    and are similar to inset lists except callable
                    macros are ignored.
                    .It Em Hang
                    Hanged labels are a matter of taste.
                    .It Em Ohang
                    Overhanging labels are nice when space is constrained.
                    .It Em Inset
                    Inset labels are useful for controlling blocks of
                    paragraphs and are valuable for converting
                    .Nm -mdoc
                    manuals to other formats.
                    .El

     --ccoolluummnn  This list type generates multiple columns.  The number of col-
              umns and the width of each column is determined by the arguments
              to the --ccoolluummnn list, <_s_t_r_i_n_g_1>, <_s_t_r_i_n_g_2>, etc.  If <_s_t_r_i_n_g_N>
              starts with a `.' (dot) immediately followed by a valid --mmddoocc
              macro name, interpret <_s_t_r_i_n_g_N> and use the width of the result.
              Otherwise, the width of <_s_t_r_i_n_g_N> (typeset with a fixed-width
              font) is taken as the _Nth column width.

              Each `.It' argument is parsed to make a row, each column within
              the row is a separate argument separated by a tab or the `.Ta'
              macro.

              The table:

                    SSttrriinngg    NNrrooffff    TTrrooffff
                    <=        <=       <=
                    >=        >=       >=

              was produced by:

              .Bl -column -offset indent ".Sy String" ".Sy Nroff" ".Sy Troff"
              .It Sy String Ta Sy Nroff Ta Sy Troff
              .It Li <= Ta <= Ta \*(<=
              .It Li >= Ta >= Ta \*(>=
              .El

              Don't abuse this list type!  For more complicated cases it might
              be far better and easier to use tbl(1), the table preprocessor.

     Other keywords:

     --wwiiddtthh <_s_t_r_i_n_g>   If <_s_t_r_i_n_g> starts with a `.' (dot) immediately fol-
                       lowed by a valid --mmddoocc macro name, interpret <_s_t_r_i_n_g>
                       and use the width of the result.  Almost all lists in
                       this document use this option.

                       Example:

                             .Bl -tag -width ".Fl test Ao Ar string Ac"
                             .It Fl test Ao Ar string Ac
                             This is a longer sentence to show how the
                             .Fl width
                             flag works in combination with a tag list.
                             .El

                       gives:

                       --tteesstt <_s_t_r_i_n_g>  This is a longer sentence to show how
                                       the --wwiiddtthh flag works in combination
                                       with a tag list.

                       (Note that the current state of --mmddoocc is saved before
                       <_s_t_r_i_n_g> is interpreted; afterwards, all variables are
                       restored again.  However, boxes (used for enclosures)
                       can't be saved in GNU troff(1); as a consequence, argu-
                       ments must always be _b_a_l_a_n_c_e_d to avoid nasty errors.
                       For example, do not write `.Ao Ar string' but `.Ao Ar
                       string Xc' instead if you really need only an opening
                       angle bracket.)

                       Otherwise, if <_s_t_r_i_n_g> is a valid numeric expression
                       (_w_i_t_h _a _s_c_a_l_e _i_n_d_i_c_a_t_o_r _o_t_h_e_r _t_h_a_n `_u'), use that value
                       for indentation.  The most useful scale indicators are
                       `m' and `n', specifying the so-called _E_m and _E_n _s_q_u_a_r_e.
                       This is approximately the width of the letters `m' and
                       `n' respectively of the current font (for nroff output,
                       both scale indicators give the same values).  If
                       <_s_t_r_i_n_g> isn't a numeric expression, it is tested
                       whether it is an --mmddoocc macro name, and the default
                       width value associated with this macro is used.  Fi-
                       nally, if all tests fail, the width of <_s_t_r_i_n_g> (type-
                       set with a fixed-width font) is taken as the width.

                       If a width is not specified for the tag list type, `6n'
                       is used.

     --ooffffsseett <_s_t_r_i_n_g>  If <_s_t_r_i_n_g> is _i_n_d_e_n_t, a default indent value (normally
                       set to 6n, similar to the value used in `.Dl' or `.Bd')
                       is used.  If <_s_t_r_i_n_g> is a valid numeric expression in-
                       stead (_w_i_t_h _a _s_c_a_l_e _i_n_d_i_c_a_t_o_r _o_t_h_e_r _t_h_a_n `_u'), use that
                       value for indentation.  The most useful scale indica-
                       tors are `m' and `n', specifying the so-called _E_m and
                       _E_n _s_q_u_a_r_e.  This is approximately the width of the let-
                       ters `m' and `n' respectively of the current font (for
                       nroff output, both scale indicators give the same val-
                       ues).  If <_s_t_r_i_n_g> isn't a numeric expression, it is
                       tested whether it is an --mmddoocc macro name, and the de-
                       fault offset value associated with this macro is used.
                       Finally, if all tests fail, the width of <_s_t_r_i_n_g>
                       (typeset with a fixed-width font) is taken as the off-
                       set.

     --ccoommppaacctt          Suppress insertion of vertical space before the list
                       and between list items.

MMIISSCCEELLLLAANNEEOOUUSS MMAACCRROOSS
     Here a list of the remaining macros which do not fit well into one of the
     above sections.  We couldn't find real examples for the following macros:
     `.Me' and `.Ot'.  They are documented here for completeness - if you know
     how to use them properly please send a mail to _g_r_o_f_f_@_g_n_u_._o_r_g (including
     an example).

     .Bt  prints

                is currently in beta test.

          It is neither callable nor parsed and takes no arguments.

     .Fr

                Usage: .Fr <function return value> ...

          Don't use this macro.  It allows a break right before the return
          value (usually a single digit) which is bad typographical behaviour.
          Use `\~' to tie the return value to the previous word.

     .Hf  Use this macro to include a (header) file literally.  It first
          prints `File:' followed by the file name, then the contents of
          <file>.

                Usage: .Hf <file>

          It is neither callable nor parsed.

     .Lk  To be written.

     .Me  Exact usage unknown.  The documentation in the --mmddoocc source file de-
          scribes it as a macro for "menu entries".

          Its default width is 6n.

     .Mt  To be written.

     .Ot  Exact usage unknown.  The documentation in the --mmddoocc source file de-
          scribes it as "old function type (fortran)".

     .Sm  Activate (toggle) space mode.

                Usage: .Sm [on | off] ...

          If space mode is off, no spaces between macro arguments are in-
          serted.  If called without a parameter (or if the next parameter is
          neither `on' nor `off', `.Sm' toggles space mode.

     .Ud  prints

                currently under development.

          It is neither callable nor parsed and takes no arguments.

PPRREEDDEEFFIINNEEDD SSTTRRIINNGGSS
     The following strings are predefined:

     SSttrriinngg   NNrrooffff      TTrrooffff      MMeeaanniinngg
     <=       <=         <=         less equal
     >=       >=         >=         greater equal
     Rq       ''         "          right double quote
     Lq       ``         "          left double quote
     ua       ^          ^          upwards arrow
     aa       '          '          acute accent
     ga       `          `          grave accent
     q        "          "          straight double quote
     Pi       pi         pi         greek pi
     Ne       !=         !=         not equal
     Le       <=         <=         less equal
     Ge       >=         >=         greater equal
     Lt       <          <          less than
     Gt       >          >          greater than
     Pm       +-         +-         plus minus
     If       infinity   infinity   infinity
     Am       &          &          ampersand
     Na       _N_a_N        _N_a_N        not a number
     Ba       |          |          vertical bar

     The names of the columns NNrrooffff and TTrrooffff are a bit misleading; NNrrooffff
     shows the ASCII representation, while TTrrooffff gives the best glyph form
     available.  For example, a Unicode enabled TTY-device will have proper
     glyph representations for all strings, whereas the enhancement for a
     Latin1 TTY-device is only the plus-minus sign.

     String names which consist of two characters can be written as `\*(xx';
     string names which consist of one character can be written as `\*x'.  A
     generic syntax for a string name of any length is `\*[xxx]' (this is a
     GNU troff(1) extension).

DDIIAAGGNNOOSSTTIICCSS
     The debugging macro `.Db' available in previous versions of --mmddoocc has
     been removed since GNU troff(1) provides better facilities to check pa-
     rameters; additionally, many error and warning messages have been added
     to this macro package, making it both more robust and verbose.

     The only remaining debugging macro is `.Rd' which yields a register dump
     of all global registers and strings.  A normal user will never need it.

FFOORRMMAATTTTIINNGG WWIITTHH GGRROOFFFF,, TTRROOFFFF,, AANNDD NNRROOFFFF
     By default, the package inhibits page breaks, headers, and footers if
     displayed with a TTY device like `latin1' or `unicode', to make the man-
     ual more efficient for viewing on-line.  This behaviour can be changed
     (e.g. to create a hardcopy of the TTY output) by setting the register
     `cR' to zero while calling groff(1), resulting in multiple pages instead
     of a single, very long page:

           groff -Tlatin1 -rcR=0 -mdoc foo.man > foo.txt

     For double-sided printing, set register `D' to 1:

           groff -Tps -rD1 -mdoc foo.man > foo.ps

     To change the document font size to 11pt or 12pt, set register `S' ac-
     cordingly:

           groff -Tdvi -rS11 -mdoc foo.man > foo.dvi

     Register `S' is ignored for TTY devices.

     The line and title length can be changed by setting the registers `LL'
     and `LT', respectively:

           groff -Tutf8 -rLL=100n -rLT=100n -mdoc foo.man | less

     If not set, both registers default to 78n for TTY devices and 6.5i other-
     wise.

FFIILLEESS
     doc.tmac          The main manual macro package.
     mdoc.tmac         A wrapper file to call _d_o_c_._t_m_a_c.
     mdoc/doc-common   Common strings, definitions, stuff related typographic
                       output.
     mdoc/doc-nroff    Definitions used for a TTY output device.
     mdoc/doc-ditroff  Definitions used for all other devices.
     mdoc.local        Local additions and customizations.
     andoc.tmac        Use this file if you don't know whether the --mmddoocc or
                       the --mmaann package should be used.  Multiple man pages
                       (in either format) can be handled.

SSEEEE AALLSSOO
     groff(1), man(1), troff(1), groff_man(7)

BBUUGGSS
     Section 3f has not been added to the header routines.

     `.Nm' font should be changed in _N_A_M_E section.

     `.Fn' needs to have a check to prevent splitting up if the line length is
     too short.  Occasionally it separates the last parenthesis, and sometimes
     looks ridiculous if a line is in fill mode.

     The list and display macros do not do any keeps and certainly should be
     able to.

BSD                            November 2, 2010                            BSD
