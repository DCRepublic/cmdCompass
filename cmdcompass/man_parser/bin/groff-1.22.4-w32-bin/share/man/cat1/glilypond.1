glilypond(1)                General Commands Manual               glilypond(1)



NNAAMMEE
       glilypond - integrate lilypond parts into groff

SSYYNNOOPPSSIISS
       gglliillyyppoonndd [{----llyy22eeppss|----ppddff22eeppss}] [--ee _d_i_r_e_c_t_o_r_y] [--kk] [--oo _o_u_t_p_u_t_-_f_i_l_e]
                 [--pp _f_i_l_e_n_a_m_e_-_p_r_e_f_i_x] [--tt _t_d_i_r] [{--vv|--VV}] [--] [----] [_f_i_l_e_s_p_e_c
                 ...]
       gglliillyyppoonndd [{----llyy22eeppss|----ppddff22eeppss}] [----eeppss__ddiirr _d_i_r_e_c_t_o_r_y] [----kkeeeepp__aallll]
                 [----oouuttppuutt _o_u_t_p_u_t_-_f_i_l_e] [----pprreeffiixx _f_i_l_e_n_a_m_e_-_p_r_e_f_i_x] [----tteemmpp__ddiirr
                 _t_d_i_r] [----vveerrbboossee] [--] [----] [_f_i_l_e_s_p_e_c ...]

       gglliillyyppoonndd --??
       gglliillyyppoonndd --hh
       gglliillyyppoonndd ----hheellpp
       gglliillyyppoonndd ----uussaaggee

       gglliillyyppoonndd --ll
       gglliillyyppoonndd ----lliicceennssee

       gglliillyyppoonndd ----vveerrssiioonn

DDEESSCCRRIIPPTTIIOONN
       gglliillyyppoonndd  transforms sheet music written in the _l_i_l_y_p_o_n_d language into
       the ggrrooffff(7) language using the ..PPSSPPIICC request, such that ggrrooffff(1)  can
       transform  it into a format that can be displayed directly.  ..PPDDFFPPIICC is
       available, but does on yet work with lilypond.

       Files in _g_r_o_f_f language and _s_t_a_n_d_a_r_d _i_n_p_u_t can  be  provided  as  argu-
       ments.

WWOORRKKIINNGG GGLLIILLYYPPOONNDD
       Together with ..PPSSPPIICC, gglliillyyppoonndd ccaann wwoorrkk oonnllyy ffoorr _t_r_o_f_f devices without
       _P_D_F and _X devices.

       I.e., the following  ggrrooffff  devices  work,  --TTppss,  --TTddvvii,  --TThhttmmll,  and
       --TTxxhhttmmll.

       I'm not sure about the llddpp and lljj44 devices.

       In  ggrrooffffeerr,  it  is easier to use the following device options, either
       ----ppss, ----ddiivv, ----hhttmmll, or ----xxhhttmmll.

       Unfortunately, the ggrrooffff option --TTppddff does not  work  and  the  ggrrooffffeerr
       default _P_D_F works neither.

       But  ggrrooffffeerr has an additional _p_d_f _m_o_d_e, not available in ggrrooffff.  It is
       based on the _p_s _m_o_d_e in ggrrooffff and  is  called  through  ggrrooffffeerr  ----ppddff22
       _r_o_f_f_-_f_i_l_e_-_w_i_t_h_-_l_i_l_y_p_o_n_d.

OOPPTTIIOONN OOVVEERRVVIIEEWW
   BBrreeaakkiinngg OOppttiioonnss
       --??|--hh|----hheellpp|----uussaaggee
              Print help or usage information, then leave the program.

       ----vveerrssiioonn
              Print version information.

       --ll|----lliicceennssee
              Print license information.

   OOppttiioonnss ffoorr bbuuiillddiinngg EEPPSS FFiilleess
       [----llyy22eeppss]
              Here  the  lliillyyppoonndd program creates _e_p_s files directly.  This is
              the default.

       [----ppddff22eeppss]
              The program gglliillyyppoonndd generates a _P_D_F file using lliillyyppoonndd.  Then
              the _e_p_s file is generated by ppddff22ppss and ppss22eeppssR..

   DDiirreeccttoorriieess aanndd FFiilleess
       --ee|----eeppss__ddiirr _d_i_r_e_c_t_o_r_y___n_a_m_e
              Normally  all  _E_P_S  files  are  sent to the temporary directory.
              With this option, you can generate your own directory, in  which
              all useful _E_P_S files are send.  So at last, the temporary direc-
              tory can be removed.

       --pp|----pprreeffiixx _b_e_g_i_n___o_f___n_a_m_e
              Normally all temporary files get names that start with the llyy_._._.
              prefix.  With this option, you can freely change this prefix.

       --kk|----kkeeeepp__aallll
              Normally  all temporary files without the _e_p_s files are deleted.
              With this option, all generated files  either  by  the  lliillyyppoonndd
              program or other format transposers are kept.

       --tt|----tteemmpp__ddiirr _d_i_r
              With  this option, you call a directory that is the base for the
              temporary directory.  This directory name is used as is  without
              any  extensions.  If this directory does not exist it is be cre-
              ated.  The temporary directory is created by Perl's security op-
              erations  directly  under this directory.  In this temporary di-
              rectory, the temporary files are stored.

   OOuuttppuutt
       --oo|----oouuttppuutt _f_i_l_e___n_a_m_e
              Normally all _g_r_o_f_f output of this program  is  sent  to  SSTTDDOOUUTT.
              With  this  option, that can be changed, such that the output is
              stored into a file named in the option argument _f_i_l_e___n_a_m_e.

       --vv|--VV|----vveerrbboossee
              A lot more of information is sent to STDERR.

   SShhoorrtt OOppttiioonn CCoolllleeccttiioonnss
       The argument handling of options

       _S_h_o_r_t _o_p_t_i_o_n_s are arguments that start with a single dash --.   Such  an
       argument can consist of arbitrary many options without option argument,
       composed as a collection of  option  characters  following  the  single
       dash.

       Such a collection can be terminated by an option character that expects
       an option argument.  If this option character is not the last character
       of the argument, the following final part of the argument is the option
       argument.  If it is the last character of the argument, the next  argu-
       ment is taken as the option argument.

       This is the standard for _P_O_S_I_X and _G_N_U option management.

       For example,

       --kkVVee _s_o_m_e___d_i_r
              is  a  collection  of the short options --kk and --VV without option
              argument, followed by the short option --ee with  option  argument
              that  is  the  following part of the argument _s_o_m_e___d_i_r.  So this
              argument could also be written as several  arguments  --kk  --VV  --ee
              _s_o_m_e___d_i_r.

   HHaannddlliinngg ooff LLoonngg OOppttiioonnss
       Arguments that start with a double dash ---- are so-called _l_o_n_g _o_p_t_i_o_n_s _R
       _.  Each double dash argument can only have a single long option.

       _L_o_n_g _o_p_t_i_o_n_s have or have not an option argument.  An  option  argument
       can be the next argument or can be appended with an equal sign == to the
       same argument as the long option.

       ----hheellpp is a long option without an option argument.

       ----eeppss__ddiirr _s_o_m_e___d_i_r
       ----eeppss__ddiirr==_s_o_m_e___d_i_r
              is the long option ----eeppss__ddiirr with the option argument _s_o_m_e___d_i_r.

       Moreover the program allows abbreviations of long options, as  much  as
       possible.

       The  _l_o_n_g _o_p_t_i_o_n ----kkeeeepp__aallll can be abbreviated from ----kkeeeepp__aall up to ----kk
       because the program does not have another _l_o_n_g _o_p_t_i_o_n whose name starts
       with the character kk.

       On  the  other hand, the option ----vveerrssiioonn cannot be abbreviated further
       than ----vveerrss because there is also the _l_o_n_g _o_p_t_i_o_n ----vveerrbboossee that can be
       abbreviated up to ----vveerrbb.

       An  option  argument  can  also  be appended to an abbreviation.  So is
       ----ee==_s_o_m_e___d_i_r the same as ----eeppss__ddiirr _s_o_m_e___d_i_r.

       Moreover the program allows an arbitrary usage of upper and lower  case
       in the option name.  This is _P_e_r_l style.

       For  example,  the  _l_o_n_g  _o_p_t_i_o_n  ----kkeeeepp__aallll  can as well be written as
       ----KKeeeepp__AAllll or even as an abbreviation like ----KKeeEE.

FFIILLEESSPPEECC AARRGGUUMMEENNTTSS
       An argument that is not an option or an option  argument  is  called  a
       _f_i_l_e_s_p_e_c argument.

       Without any _f_i_l_e_s_p_e_c argument, _s_t_a_n_d_a_r_d _i_n_p_u_t is read.

       Each  _f_i_l_e_s_p_e_c argument must either be the name of a readable file or a
       dash -- for _s_t_a_n_d_a_r_d _i_n_p_u_t.  Each input must be written in the  _r_o_f_f  or
       _g_r_o_f_f language and can include _l_i_l_y_p_o_n_d parts.

       Normally arguments starting with a dash -- are interpreted as an option.
       But if you use an argument that consists only of a doubled dash ---- RR  ,,
       all following arguments are taken as _f_i_l_e_s_p_e_c argument, even if such an
       argument starts with a dash.  This is  handled  according  to  the  _G_N_U
       standard.

TTHHEE LLIILLYYPPOONNDD PPAARRTTSS IINN RROOFFFF IINNPPUUTT
   IInntteeggrraatteedd LLiillyyppoonndd CCooddeess
       A _l_i_l_y_p_o_n_d part within a structure written in the _g_r_o_f_f language is the
       whole part between the marks
              ..lliillyyppoonndd ssttaarrtt
       and
              ..lliillyyppoonndd eenndd

       A _g_r_o_f_f input can have several of these _l_i_l_y_p_o_n_d parts.

       When processing such a _l_i_l_y_p_o_n_d part between ..lliillyyppoonndd ssttaarrtt and ..lliillyy--
       ppoonndd eenndd we say that the gglliillyyppoonndd program is in _l_i_l_y_p_o_n_d _m_o_d_e.

       These  _l_i_l_y_p_o_n_d  parts  are sent into temporary _l_i_l_y_p_o_n_d files with the
       file name extension ..llyy.  These files are transformed later on into _E_P_S
       files.

   IInncclluussiioonn ooff llyy--FFiilleess
       An  additional  command  line  for  file inclusion of _l_i_l_y_p_o_n_d files is
       given by
       ..lliillyyppoonndd iinncclluuddee _f_i_l_e___n_a_m_e
       in _g_r_o_f_f input.  For each such _i_n_c_l_u_d_e command, one  file  of  _l_i_l_y_p_o_n_d
       code  can  be  included into the _g_r_o_f_f code.  Arbitrarily many of these
       commands can be included in the _g_r_o_f_f input.

       These include commands can only be used  outside  the  _l_i_l_y_p_o_n_d  parts.
       Within the _l_i_l_y_p_o_n_d _m_o_d_e, this inclusion is not possible.  So ..lliillyyppoonndd
       iinncclluuddee may not be used in _l_i_l_y_p_o_n_d _m_o_d_e, i.e. between ..lliillyyppoonndd  ssttaarrtt
       and  ..lliillyyppoonndd  eenndd.  These included _l_y-files are also transformed into
       _E_P_S files.

GGEENNEERRAATTEEDD FFIILLEESS
       By the transformation process of _l_i_l_y_p_o_n_d parts into _E_P_S  files,  there
       are many files generated.  By default, these files are regarded as tem-
       porary files and as such stored in a temporary directory.

       This process can be changed by command-line options.

   CCoommmmaanndd LLiinnee OOppttiioonnss ffoorr DDiirreeccttoorriieess
       The temporary directory for this program is  either  created  automati-
       cally or can be named by the option --tt|----tteemmpp__ddiirr _d_i_r.

       Moreover, the _E_P_S files that are later on referred by ..PPSSPPIICC command in
       the final _g_r_o_f_f output can be stored in a different directory that  can
       be  set  by  the command-line option --ee|----eeppss__ddiirr _d_i_r_e_c_t_o_r_y___n_a_m_e.  With
       this option, the temporary directory can be removed completely  at  the
       end of the program.

       The  beginning  of  the  names of the temporary files can be set by the
       command-line option [--pp _|] _b_e_g_i_n___o_f___n_a_m_e.

       All of the temporary files except the _E_P_S files  are  deleted  finally.
       This  can  be  changed  by  setting the command-line option [--kk _|] With
       this, all temporary files and directories are kept, not deleted.

       These _E_P_S files are stored in a temporary or _E_P_S directory.   But  they
       cannot be deleted by the transformation process because they are needed
       for the display which can take a long time.

TTRRAANNSSFFOORRMMAATTIIOONN PPRROOCCEESSSSEESS FFOORR GGEENNEERRAATTIINNGG EEPPSS FFIILLEESS
   MMooddee ppddff22eeppss
       This mode is the actual default and can also be chosen  by  the  option
       ----ppddff22eeppss.

       In  this mode, the ..llyy files are transformed by the lliillyyppoonndd(1) program
       into _P_D_F files, using
              lliillyyppoonndd ----ppddff ----oouuttppuutt==_f_i_l_e_-_n_a_m_e
       for each ..llyy file.  The _f_i_l_e_-_n_a_m_e must be provided without  the  exten-
       sion ..ppddff.  By this process, a file _f_i_l_e_-_n_a_m_e..ppddff is generated.

       The  next step is to transform these _P_D_F files into a _P_S file.  This is
       done by the ppddff22ppss(1) program using
              $  ppddff22ppss _f_i_l_e_-_n_a_m_e ..ppddff _f_i_l_e_-_n_a_m_e ..ppss
       The next step creates an _E_P_S file from the _P_S file.  This  is  done  by
       the ppss22eeppss(1) program using
              $ ppss22eeppss _f_i_l_e_-_n_a_m_e..ppss

       By  that, a file _f_i_l_e_-_n_a_m_e..eeppss is created for each _l_i_l_y_p_o_n_d part in the
       _g_r_o_f_f file or standard input.

       The last step to be done is replacing all _l_i_l_y_p_o_n_d parts by  the  _g_r_o_f_f
       command
              ..PPSSPPIICC _f_i_l_e_-_n_a_m_e..eeppss

   MMooddee llyy22eeppss
       In  earlier  time, this mode was the default.  But now it does not work
       any more, so accept the new default ppddff22eeppss.  For  testing,  this  mode
       can also be chosen by the gglliillyyppoonndd option ----llyy22eeppss.

       In  this  mode,  the  ..llyy files are transformed by the lliillyyppoonndd program
       into many files of different formats, including _e_p_s files, using
              $$ lliillyyppoonndd ----ppss --ddbbaacckkeenndd==eeppss --ddggss--llooaadd--ffoonnttss ----oouuttppuutt==_f_i_l_e_-_n_a_m_e
       for each ..llyy file.  The output _f_i_l_e_-_n_a_m_e must be  provided  without  an
       extension, its directory is temporary.

       There  are many _E_P_S files created.  One having the complete transformed
       llyy file, named _f_i_l_e_-_n_a_m_e..eeppss.

       Moreover there are _E_P_S files for each page, named _f_i_l_e_-_n_a_m_e--_d_i_g_i_t..eeppss.

       The last step to be done is replacing all _l_i_l_y_p_o_n_d parts by the collec-
       tion  of  the corresponding _E_P_S page files.  This is done by _g_r_o_f_f com-
       mands
       ..PPSSPPIICC _f_i_l_e_-_n_a_m_e--_d_i_g_i_t..eeppss

TTHHEE GGEENNEERRAATTEEDD NNEEWW RROOFFFF SSTTRRUUCCTTUURREE
       The new ggrrooffff(7) structure generated by gglliillyyppoonndd is either

       1)     sent to standard output and can there be saved into  a  file  or
              piped into ggrrooffff(1) or ggrrooffffeerr(1) or

       2)     stored into a file by given the option --oo  || --output _f_i_l_e___n_a_m_e

AAUUTTHHOORRSS
       gglliillyyppoonndd was written by Bernd Warken <groff-bernd.warken-72@web.de>.

SSEEEE AALLSSOO
       ggrrooffff(1)
              describes  the  usage of the _g_r_o_f_f command and contains pointers
              to further documentation of the _g_r_o_f_f system.

       ggrrooffff__ttmmaacc(5)
              describes the ..PPSSPPIICC request.

       lliillyyppoonndd(1)
              briefly describes the lliillyyppoonndd command and contains pointers  to
              further documentation.

       ppddff22ppss(1)
              transforms a _P_D_F file into a _P_o_s_t_S_c_r_i_p_t format.

       ppss22eeppss(1)
              transforms a _P_S file into an _E_P_S format.



groff 1.22.4                     November 2018                    glilypond(1)
